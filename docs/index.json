[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "students-api/.external-ecmascript.js",
    "static": true,
    "longname": "students-api/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "students-api/config/cors.js",
    "content": "/**\r\n * @desc Database config used to initialize application models\r\n */\r\nconst corsConfig = {}\r\n\r\nexport default corsConfig\r\n",
    "static": true,
    "longname": "H:/Github/students-api/config/cors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "corsConfig",
    "memberof": "students-api/config/cors.js",
    "static": true,
    "longname": "students-api/config/cors.js~corsConfig",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/config/cors.js",
    "importStyle": "corsConfig",
    "description": "Database config used to initialize application models",
    "lineNumber": 4,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "students-api/config/database.js",
    "content": "/**\n * @desc Database config used to initialize application models\n */\nconst databaseConfig = {\n  development: {\n    use_env_variable: 'TEST_DATABASE',\n    dialect: process.env.DB_DIALECT\n  },\n  test: {\n    use_env_variable: 'DEVELOPMENT_DATABASE',\n    dialect: process.env.DB_DIALECT\n  },\n  production: {\n    use_env_variable: 'PRODUCTION_DATABASE',\n    dialect: process.env.DB_DIALECT\n  }\n}\n\nexport default databaseConfig\n",
    "static": true,
    "longname": "H:/Github/students-api/config/database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "databaseConfig",
    "memberof": "students-api/config/database.js",
    "static": true,
    "longname": "students-api/config/database.js~databaseConfig",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/config/database.js",
    "importStyle": "databaseConfig",
    "description": "Database config used to initialize application models",
    "lineNumber": 4,
    "type": {
      "types": [
        "{\"development\": *, \"test\": *, \"production\": *}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "students-api/config/env.js",
    "content": "/**\r\n * @desc Required env keys on app initialization\r\n */\r\nconst envRequiredKeys = [\r\n  'NODE_ENV',\r\n  'APP_NAME',\r\n  'APP_MAIL',\r\n  'APP_KEY',\r\n  'PORT',\r\n  'REDIS_CONNECTION',\r\n  'TEST_DATABASE',\r\n  'DEVELOPMENT_DATABASE',\r\n  'PRODUCTION_DATABASE',\r\n  'MESSAGE_BROKERS',\r\n  'MAIL_PORT',\r\n  'MAIL_USER',\r\n  'MAIL_PASSWORD',\r\n  'MAIL_HOST',\r\n  'SLACK_TOKEN'\r\n]\r\n\r\nexport default envRequiredKeys\r\n",
    "static": true,
    "longname": "H:/Github/students-api/config/env.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "envRequiredKeys",
    "memberof": "students-api/config/env.js",
    "static": true,
    "longname": "students-api/config/env.js~envRequiredKeys",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/config/env.js",
    "importStyle": "envRequiredKeys",
    "description": "Required env keys on app initialization",
    "lineNumber": 4,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "students-api/config/signatures.js",
    "content": "/**\r\n * @desc Signature configs for different types of signatures and their expiration times\r\n */\r\nconst signaturesConfig = {\r\n  generic: {\r\n    id: 'GENERIC',\r\n    expiration: {\r\n      time: 5,\r\n      unit: 'd'\r\n    }\r\n  },\r\n  email_verification: {\r\n    id: 'EV',\r\n    expiration: {\r\n      time: 1,\r\n      unit: 'd'\r\n    }\r\n  }\r\n}\r\n\r\nexport default signaturesConfig\r\n",
    "static": true,
    "longname": "H:/Github/students-api/config/signatures.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "signaturesConfig",
    "memberof": "students-api/config/signatures.js",
    "static": true,
    "longname": "students-api/config/signatures.js~signaturesConfig",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/config/signatures.js",
    "importStyle": "signaturesConfig",
    "description": "Signature configs for different types of signatures and their expiration times",
    "lineNumber": 4,
    "type": {
      "types": [
        "{\"generic\": *, \"email_verification\": *}"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "students-api/config/tokens.js",
    "content": "/**\r\n * @desc JWT Token and Refresh token expiration config\r\n */\r\nconst tokensConfig = {\r\n  refresh: {\r\n    expiration: {\r\n      time: 5,\r\n      unit: 'd'\r\n    }\r\n  },\r\n  access: {\r\n    expiration: {\r\n      time: 1,\r\n      unit: 'd'\r\n    }\r\n  }\r\n}\r\n\r\nexport default tokensConfig\r\n",
    "static": true,
    "longname": "H:/Github/students-api/config/tokens.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "tokensConfig",
    "memberof": "students-api/config/tokens.js",
    "static": true,
    "longname": "students-api/config/tokens.js~tokensConfig",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/config/tokens.js",
    "importStyle": "tokensConfig",
    "description": "JWT Token and Refresh token expiration config",
    "lineNumber": 4,
    "type": {
      "types": [
        "{\"refresh\": *, \"access\": *}"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "students-api/controllers/classController.js",
    "content": "import { ClassesRepository } from '../repositories'\r\nimport rules from '../domain/rules.js'\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst repository = new ClassesRepository()\r\n\r\n/**\r\n * @desc Contains all logic methods to manage Class models through API requests\r\n */\r\nexport default class ClassController {\r\n  /**\r\n   * @desc Show all classes\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async index (req, res) {\r\n    try {\r\n      let all\r\n\r\n      /**\r\n       * Use utils.sort middleware\r\n       */\r\n      if (req.order) {\r\n        all = await repository.getMany({}, [['start_date', req.order]])\r\n      } else {\r\n        all = await repository.getMany()\r\n      }\r\n\r\n      return res.status(200).json(all)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show specific class\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async show (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      const type = await repository.getOne({ id: Number(id) })\r\n      return res.status(200).json(type)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show cancelled enrolls for a class\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async showCancelled (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      const type = await repository.getOneWithCancelledEnrolls(Number(id))\r\n      return res.status(200).json(type)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show confirmed enrolls for a class\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async showConfirmed (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      const type = await repository.getOneWithConfirmedEnrolls(Number(id))\r\n      return res.status(200).json(type)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Crate a class\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async create (req, res) {\r\n    const newTypeData = req.body\r\n    try {\r\n      const newType = await repository.create(newTypeData)\r\n      return res.status(200).json(newType)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Update a class\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async update (req, res) {\r\n    const { id } = req.params\r\n    const newInfo = req.body\r\n\r\n    try {\r\n      if (req.userRole) {\r\n        if (req.userRole.role_name == 'instructor') {\r\n          const data = await repository.getOne({ id, instructor_id: req.userId })\r\n\r\n          if (!data) {\r\n            return res.status(403).json({ message: 'You\\'re not authorized to edit class which you don\\'t own ' })\r\n          }\r\n        }\r\n      }\r\n\r\n      await repository.updateOne(newInfo, { id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} updated` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Destroy a class\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async destroy (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      await repository.deleteOne({ id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} deleted` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Recover a class\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async recover (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      await repository.recoverOne({ id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} recovered` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show all fullfied classes\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async indexFullfied (req, res) {\r\n    try {\r\n      const fullfied = await repository.getFullfied(rules.class.max_per_classroom)\r\n      return res.status(200).json(fullfied)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show class enrollments\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async showEnrollments (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      const enrollments = await repository.getEnrollments(Number(id))\r\n      return res.status(200).json(enrollments)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/controllers/classController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "repository",
    "memberof": "students-api/controllers/classController.js",
    "static": true,
    "longname": "students-api/controllers/classController.js~repository",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/controllers/classController.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "students-api/repositories/classesRepository.js~ClassesRepository"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "ClassController",
    "memberof": "students-api/controllers/classController.js",
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/controllers/classController.js",
    "importStyle": "ClassController",
    "description": "Contains all logic methods to manage Class models through API requests",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "index",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.index",
    "access": "public",
    "description": "Show all classes",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "show",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.show",
    "access": "public",
    "description": "Show specific class",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "showCancelled",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.showCancelled",
    "access": "public",
    "description": "Show cancelled enrolls for a class",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "showConfirmed",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.showConfirmed",
    "access": "public",
    "description": "Show confirmed enrolls for a class",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "create",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.create",
    "access": "public",
    "description": "Crate a class",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "update",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.update",
    "access": "public",
    "description": "Update a class",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "destroy",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.destroy",
    "access": "public",
    "description": "Destroy a class",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "recover",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.recover",
    "access": "public",
    "description": "Recover a class",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "indexFullfied",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.indexFullfied",
    "access": "public",
    "description": "Show all fullfied classes",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "showEnrollments",
    "memberof": "students-api/controllers/classController.js~ClassController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classController.js~ClassController.showEnrollments",
    "access": "public",
    "description": "Show class enrollments",
    "lineNumber": 183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "students-api/controllers/classtypeController.js",
    "content": "import { ClasstypesRepository } from '../repositories'\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst repository = new ClasstypesRepository()\r\n\r\n/**\r\n * @desc Contains all logic methods to manage Classtype models through API requests\r\n */\r\nexport default class ClasstypeController {\r\n  /**\r\n   * @desc Show all class types\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async index (req, res) {\r\n    try {\r\n      const all = await repository.getMany()\r\n      return res.status(200).json(all)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show specific classtype\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async show (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      const type = await repository.getOne({ id: Number(id) })\r\n      return res.status(200).json(type)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Crate a classtype\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async create (req, res) {\r\n    const newTypeData = req.body\r\n    try {\r\n      const newType = await repository.create(newTypeData)\r\n      return res.status(200).json(newType)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Update a classtype\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async update (req, res) {\r\n    const { id } = req.params\r\n    const newInfo = req.body\r\n    try {\r\n      await repository.updateOne(newInfo, { id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} updated` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Destroy a classtype\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async destroy (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      await repository.deleteOne({ id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} deleted` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Recover a classtype\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async recover (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      await repository.recoverOne({ id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} recovered` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/controllers/classtypeController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "repository",
    "memberof": "students-api/controllers/classtypeController.js",
    "static": true,
    "longname": "students-api/controllers/classtypeController.js~repository",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/controllers/classtypeController.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "students-api/repositories/classtypesRepository.js~ClasstypesRepository"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "ClasstypeController",
    "memberof": "students-api/controllers/classtypeController.js",
    "static": true,
    "longname": "students-api/controllers/classtypeController.js~ClasstypeController",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/controllers/classtypeController.js",
    "importStyle": "ClasstypeController",
    "description": "Contains all logic methods to manage Classtype models through API requests",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "index",
    "memberof": "students-api/controllers/classtypeController.js~ClasstypeController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classtypeController.js~ClasstypeController.index",
    "access": "public",
    "description": "Show all class types",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "show",
    "memberof": "students-api/controllers/classtypeController.js~ClasstypeController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classtypeController.js~ClasstypeController.show",
    "access": "public",
    "description": "Show specific classtype",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "create",
    "memberof": "students-api/controllers/classtypeController.js~ClasstypeController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classtypeController.js~ClasstypeController.create",
    "access": "public",
    "description": "Crate a classtype",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "update",
    "memberof": "students-api/controllers/classtypeController.js~ClasstypeController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classtypeController.js~ClasstypeController.update",
    "access": "public",
    "description": "Update a classtype",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "destroy",
    "memberof": "students-api/controllers/classtypeController.js~ClasstypeController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classtypeController.js~ClasstypeController.destroy",
    "access": "public",
    "description": "Destroy a classtype",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "recover",
    "memberof": "students-api/controllers/classtypeController.js~ClasstypeController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/classtypeController.js~ClasstypeController.recover",
    "access": "public",
    "description": "Recover a classtype",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "students-api/controllers/enrollmentController.js",
    "content": "import { EnrollmentsRepository } from '../repositories'\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst repository = new EnrollmentsRepository()\r\n\r\n/**\r\n * @desc Contains all logic methods to manage Enrollment models through API requests\r\n */\r\nexport default class EnrollmentController {\r\n  /**\r\n   * @desc Show all enrollments\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async index (req, res) {\r\n    const { studentId } = req.params\r\n    try {\r\n      const enrollments = await repository.getMany({ student_id: Number(studentId) })\r\n      return res.status(200).json(enrollments)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show specific class\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async show (req, res) {\r\n    const { studentId, enrollmentId } = req.params\r\n    try {\r\n      const enrollment = await repository.getOne({ id: Number(enrollmentId), student_id: Number(studentId) })\r\n      return res.status(200).json(enrollment)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Crate a enrollment\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async create (req, res) {\r\n    const { studentId } = req.params\r\n    const newEnrollmentData = { ...req.body, student_id: Number(studentId) }\r\n    try {\r\n      const newEnrollment = await repository.create(newEnrollmentData)\r\n      return res.status(200).json(newEnrollment)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Update a enrollment\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async update (req, res) {\r\n    const { studentId, enrollmentId } = req.params\r\n    const newInfo = req.body\r\n    try {\r\n      await repository.updateOne(newInfo, { id: Number(enrollmentId), student_id: Number(studentId) })\r\n      const updatedEnrollment = await repository.getOne({ id: Number(enrollmentId) })\r\n      return res.status(200).json(updatedEnrollment)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Destroy a enrollment\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async destroy (req, res) {\r\n    const { enrollmentId } = req.params\r\n    try {\r\n      await repository.deleteOne({ id: Number(enrollmentId) })\r\n      return res.status(200).json({ message: `Id ${enrollmentId} deleted` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Recover a enrollment\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async recover (req, res) {\r\n    const { studentId, enrollmentId } = req.params\r\n    try {\r\n      await repository.recoverOne({ id: Number(enrollmentId), student_id: Number(studentId) })\r\n      return res.status(200).json({ message: `Id ${enrollmentId} recovered` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Get specific student enrollments\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async indexStudent (req, res) {\r\n    const { studentId } = req.params\r\n    try {\r\n      const enrollments = await repository.getStudentEnrolls(Number(studentId))\r\n      return res.status(200).json(enrollments)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/controllers/enrollmentController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "repository",
    "memberof": "students-api/controllers/enrollmentController.js",
    "static": true,
    "longname": "students-api/controllers/enrollmentController.js~repository",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/controllers/enrollmentController.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "EnrollmentController",
    "memberof": "students-api/controllers/enrollmentController.js",
    "static": true,
    "longname": "students-api/controllers/enrollmentController.js~EnrollmentController",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/controllers/enrollmentController.js",
    "importStyle": "EnrollmentController",
    "description": "Contains all logic methods to manage Enrollment models through API requests",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "index",
    "memberof": "students-api/controllers/enrollmentController.js~EnrollmentController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/enrollmentController.js~EnrollmentController.index",
    "access": "public",
    "description": "Show all enrollments",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "show",
    "memberof": "students-api/controllers/enrollmentController.js~EnrollmentController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/enrollmentController.js~EnrollmentController.show",
    "access": "public",
    "description": "Show specific class",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "create",
    "memberof": "students-api/controllers/enrollmentController.js~EnrollmentController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/enrollmentController.js~EnrollmentController.create",
    "access": "public",
    "description": "Crate a enrollment",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "update",
    "memberof": "students-api/controllers/enrollmentController.js~EnrollmentController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/enrollmentController.js~EnrollmentController.update",
    "access": "public",
    "description": "Update a enrollment",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "destroy",
    "memberof": "students-api/controllers/enrollmentController.js~EnrollmentController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/enrollmentController.js~EnrollmentController.destroy",
    "access": "public",
    "description": "Destroy a enrollment",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "recover",
    "memberof": "students-api/controllers/enrollmentController.js~EnrollmentController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/enrollmentController.js~EnrollmentController.recover",
    "access": "public",
    "description": "Recover a enrollment",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "indexStudent",
    "memberof": "students-api/controllers/enrollmentController.js~EnrollmentController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/enrollmentController.js~EnrollmentController.indexStudent",
    "access": "public",
    "description": "Get specific student enrollments",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "students-api/controllers/shared/hostUrl.js",
    "content": "/**\r\n * @desc Get the absolute path for application like https://www.example.com through a\r\n * arandom application request to get the relevant dynamic info needed to mount the absolute path\r\n * @param {Object} req - The random Express Request\r\n * @returns {string} The absolute application url\r\n */\r\nexport default function (req) {\r\n  return req.protocol + '://' + req.hostname\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/controllers/shared/hostUrl.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "hostUrl",
    "memberof": "students-api/controllers/shared/hostUrl.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/controllers/shared/hostUrl.js~hostUrl",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/controllers/shared/hostUrl.js",
    "importStyle": "hostUrl",
    "description": "Get the absolute path for application like https://www.example.com through a\narandom application request to get the relevant dynamic info needed to mount the absolute path",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The absolute application url"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The random Express Request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The absolute application url"
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "students-api/controllers/studentController.js",
    "content": "import { StudentRepository } from '../repositories'\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst repository = new StudentRepository()\r\n\r\n/**\r\n * @desc Contains all logic methods to manage Student models through API requests\r\n */\r\nexport default class StudentsController {\r\n  /**\r\n   * @desc Show all students\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async index (req, res) {\r\n    try {\r\n      const all = await repository.getMany()\r\n      return res.status(200).json(all)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show all active students\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async indexActive (req, res) {\r\n    try {\r\n      const all = await repository.getOnlyActive()\r\n      return res.status(200).json(all)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show all inactive students\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async indexInactive (req, res) {\r\n    try {\r\n      const all = await repository.getOnlyInactive()\r\n      return res.status(200).json(all)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show specific student\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async show (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      const person = await repository.getOne({ id: Number(id) })\r\n      return res.status(200).json(person)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Crate a student\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async create (req, res) {\r\n    const newStudentData = req.body\r\n    try {\r\n      const newStudent = await repository.create(newStudentData)\r\n      return res.status(200).json(newStudent)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Update a student\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async update (req, res) {\r\n    const { id } = req.params\r\n    const newInfo = req.body\r\n    try {\r\n      await repository.updateOne(newInfo, { id: Number(id) })\r\n      const updatedStudent = await repository.getOne({ id: Number(id) })\r\n      return res.status(200).json(updatedStudent)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Destroy a student\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async destroy (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      await repository.deleteOne({ id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} deleted` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Recover a student\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async recover (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      await repository.recoverOne({ id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} recovered` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show enrollemnts for a student\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async showEnrollments (req, res) {\r\n    const { studentId } = req.params\r\n    try {\r\n      const enrollments = await repository.getStudentEnrollments({ id: Number(studentId) })\r\n      return res.status(200).json(enrollments)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Deactivate student\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async deactivate (req, res) {\r\n    const { studentId } = req.params\r\n    try {\r\n      await repository.deactivateAndUnenrollStudent(Number(studentId))\r\n      return res.status(200)\r\n        .json({ message: `Enrollments for ${studentId} have been cancelled` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Activate a student\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async reactivate (req, res) {\r\n    const { studentId } = req.params\r\n    try {\r\n      await repository.reactivateAndRenrollStudent(Number(studentId))\r\n      return res.status(200)\r\n        .json({ message: `Enrollments for ${studentId} have been activated again` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/controllers/studentController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "repository",
    "memberof": "students-api/controllers/studentController.js",
    "static": true,
    "longname": "students-api/controllers/studentController.js~repository",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/controllers/studentController.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "students-api/repositories/studentRepository.js~StudentRepository"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "StudentsController",
    "memberof": "students-api/controllers/studentController.js",
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/controllers/studentController.js",
    "importStyle": "StudentsController",
    "description": "Contains all logic methods to manage Student models through API requests",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "index",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.index",
    "access": "public",
    "description": "Show all students",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "indexActive",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.indexActive",
    "access": "public",
    "description": "Show all active students",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "indexInactive",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.indexInactive",
    "access": "public",
    "description": "Show all inactive students",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "show",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.show",
    "access": "public",
    "description": "Show specific student",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "create",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.create",
    "access": "public",
    "description": "Crate a student",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "update",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.update",
    "access": "public",
    "description": "Update a student",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "destroy",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.destroy",
    "access": "public",
    "description": "Destroy a student",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "recover",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.recover",
    "access": "public",
    "description": "Recover a student",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "showEnrollments",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.showEnrollments",
    "access": "public",
    "description": "Show enrollemnts for a student",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "deactivate",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.deactivate",
    "access": "public",
    "description": "Deactivate student",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "reactivate",
    "memberof": "students-api/controllers/studentController.js~StudentsController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/studentController.js~StudentsController.reactivate",
    "access": "public",
    "description": "Activate a student",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "students-api/controllers/userController.js",
    "content": "import { UsersRepository } from '../repositories'\r\nimport { accessTokenDelete, accessTokenGenerator, refreshTokenGenerator } from '../services/tokenService.js'\r\nimport { UserVerificationEmail } from '../services/emailService.js'\r\nimport rules from '../domain/rules.js'\r\nimport hostUrl from '../domain/hostUrl'\r\nimport { signatureDelete, signatureGenerate, signaturePayload, signaturePayloadValidateAction, signedUrlPath } from '../services/signatureService.js'\r\nimport signaturesConfig from '../config/signatures.js'\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst repository = new UsersRepository()\r\n\r\n/**\r\n * @desc Contains all logic methods to manage User models through API requests\r\n */\r\nexport default class UserController {\r\n  /**\r\n   * @desc Show specific user\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async show (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      const user = await repository.getOne({ id: Number(id) })\r\n      return res.status(200).json(user)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Show logged user profile\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async profile (req, res) {\r\n    try {\r\n      const user = await repository.getOne({ id: Number(req.userId) })\r\n      return res.status(200).json(user)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Update logged user profile\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async updateProfile (req, res) {\r\n    const newInfo = req.body\r\n    try {\r\n      await repository.updateOne(newInfo, { id: Number(req.userId) })\r\n      const updatedStudent = await repository.getOne({ id: Number(req.userId) })\r\n      return res.status(200).json(updatedStudent)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Signin a user\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async login (req, res) {\r\n    const userData = req.body\r\n    try {\r\n      const user = await repository.authenticate(userData)\r\n      const accessToken = await accessTokenGenerator(user.id)\r\n      const refreshToken = await refreshTokenGenerator(user.id)\r\n      return res.status(200).json({ accessToken, refreshToken })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Verify user email\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async verify (req, res) {\r\n    const { id } = req.params\r\n\r\n    try {\r\n      const payload = await signaturePayload(req.signature)\r\n      const checker = signaturePayloadValidateAction(payload, signaturesConfig.email_verification)\r\n\r\n      if (!checker || payload.value != id) {\r\n        return res.status(401).send({\r\n          message: 'Invalid signature!'\r\n        })\r\n      }\r\n\r\n      repository.verifyEmail(id)\r\n      signatureDelete(req.signature)\r\n      return res.status(200).json({ message: 'User verified with success!' })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Resend verification link to the user email\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async refreshVerifyLink (req, res) {\r\n    try {\r\n      const user = await repository.getOne({ id: req.userId, email_verification: false })\r\n\r\n      if (!user) {\r\n        throw new Error('User has been verified before')\r\n      }\r\n\r\n      const signature = await signatureGenerate(req.userId, signaturesConfig.email_verification)\r\n      const verificationUrl = signedUrlPath(`${hostUrl(req)}/${rules.user.email_verification.route}/${req.userId}`, signature)\r\n      new UserVerificationEmail(user, verificationUrl).sendMail().catch(console.error)\r\n      return res.status(200).json({ message: `A email with the new link has send to ${user.email}` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Refresh login (JWT Token)\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async refresh (req, res) {\r\n    try {\r\n      const accessToken = await accessTokenGenerator(req.userId)\r\n      const refreshToken = await refreshTokenGenerator(req.userId)\r\n      return res.status(200).json({ accessToken, refreshToken })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Logout current user\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async logout (req, res) {\r\n    try {\r\n      await accessTokenDelete(req.headers['x-access-token'])\r\n      return res.status(204).send()\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Crate a user (register)\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async create (req, res) {\r\n    const newUserData = req.body\r\n    try {\r\n      const newUser = await repository.create(newUserData)\r\n\r\n      if (rules.user.email_verification.status) {\r\n        const signature = await signatureGenerate(newUser.id, signaturesConfig.email_verification)\r\n        const verificationUrl = signedUrlPath(`${hostUrl(req)}/${VALIDATE_EMAIL_ROUTE}/${newUser.id}`, signature)\r\n        new UserVerificationEmail(newUser, verificationUrl).sendMail().catch(console.error)\r\n      }\r\n\r\n      return res.status(200).json({ newUser, message: `A email with the email validation has send to ${newUser.email}. You can login without validate, but cannot do all actions` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Update a user\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async update (req, res) {\r\n    const { id } = req.params\r\n    const newInfo = req.body\r\n    try {\r\n      await repository.updateOne(newInfo, { id: Number(id) })\r\n      const updatedStudent = await repository.getOne({ id: Number(id) })\r\n      return res.status(200).json(updatedStudent)\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Destroy a user\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async destroy (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      await repository.deleteOne({ id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} deleted` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Recover a user\r\n   * @param {Express.Request} req - Auto injected argument by Express\r\n   * @param {Express.Response} res - Auto injected argument by Express\r\n   * @returns {Express.Response} JSON\r\n   */\r\n  static async recover (req, res) {\r\n    const { id } = req.params\r\n    try {\r\n      await repository.recoverOne({ id: Number(id) })\r\n      return res.status(200).json({ message: `Id ${id} recovered` })\r\n    } catch (error) {\r\n      return res.status(500).json(error.message)\r\n    }\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/controllers/userController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "repository",
    "memberof": "students-api/controllers/userController.js",
    "static": true,
    "longname": "students-api/controllers/userController.js~repository",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/controllers/userController.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "students-api/repositories/usersRepository.js~UsersRepository"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "UserController",
    "memberof": "students-api/controllers/userController.js",
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/controllers/userController.js",
    "importStyle": "UserController",
    "description": "Contains all logic methods to manage User models through API requests",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "show",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.show",
    "access": "public",
    "description": "Show specific user",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "profile",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.profile",
    "access": "public",
    "description": "Show logged user profile",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "updateProfile",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.updateProfile",
    "access": "public",
    "description": "Update logged user profile",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "login",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.login",
    "access": "public",
    "description": "Signin a user",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "verify",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.verify",
    "access": "public",
    "description": "Verify user email",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "refreshVerifyLink",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.refreshVerifyLink",
    "access": "public",
    "description": "Resend verification link to the user email",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "refresh",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.refresh",
    "access": "public",
    "description": "Refresh login (JWT Token)",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "logout",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.logout",
    "access": "public",
    "description": "Logout current user",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "create",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.create",
    "access": "public",
    "description": "Crate a user (register)",
    "lineNumber": 171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "update",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.update",
    "access": "public",
    "description": "Update a user",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "destroy",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.destroy",
    "access": "public",
    "description": "Destroy a user",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "recover",
    "memberof": "students-api/controllers/userController.js~UserController",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/controllers/userController.js~UserController.recover",
    "access": "public",
    "description": "Recover a user",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Express.Response} JSON"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Express.Response"
      ],
      "spread": false,
      "description": "JSON"
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "students-api/domain/rules.js",
    "content": "/**\r\n * @desc Application domain rules\r\n */\r\nconst rules = {\r\n  class: {\r\n    max_per_classroom: 20\r\n  },\r\n  user: {\r\n    email_verification: {\r\n      status: true,\r\n      route: 'verify-email'\r\n    },\r\n    token_refresh: {\r\n      route: 'token-refresh'\r\n    },\r\n    refresh_email_link: {\r\n      route: 'email-link-refresh'\r\n    }\r\n  }\r\n}\r\n\r\nexport default rules\r\n",
    "static": true,
    "longname": "H:/Github/students-api/domain/rules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "rules",
    "memberof": "students-api/domain/rules.js",
    "static": true,
    "longname": "students-api/domain/rules.js~rules",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/domain/rules.js",
    "importStyle": "rules",
    "description": "Application domain rules",
    "lineNumber": 4,
    "type": {
      "types": [
        "{\"class\": *, \"user\": *}"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "students-api/index.js",
    "content": "import express from 'express'\r\nimport routes from './routes'\r\nimport cors from './middleware/cors.js'\r\nimport envValidator from './services/envValidator.js'\r\nimport 'dotenv/config'\r\n\r\n/* Env Validator */\r\nenvValidator()\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst app = express()\r\n\r\n/* Routes */\r\nroutes(app)\r\n\r\n/* Global Middlewares */\r\napp.use(express.urlencoded({ extended: true }))\r\ncors(app)\r\n\r\n/* Initialize server */\r\napp.listen(process.env.PORT, () => {\r\n  console.log(`Server is running on port ${process.env.PORT}.`)\r\n})\r\n",
    "static": true,
    "longname": "H:/Github/students-api/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "app",
    "memberof": "students-api/index.js",
    "static": true,
    "longname": "students-api/index.js~app",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/index.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "students-api/infrastructure/kafka/kafka.js",
    "content": "import Kafka from 'kafkajs'\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst kafka = new Kafka({\r\n  clientId: process.env.APP_NAME,\r\n  brokers: process.env.MESSAGE_BROKERS.split(',')\r\n})\r\n\r\n/**\r\n* @desc Send message to Kafka listeners with this function\r\n* @param {string} topic - Kafka topic\r\n* @param {string[]} messages - Messages to send to kafka listeners\r\n*/\r\nexport default async function (topic, messages = []) {\r\n  if (!messages.length) return\r\n\r\n  const producer = kafka.producer()\r\n  await producer.connect()\r\n\r\n  await producer.send({\r\n    topic,\r\n    messages: messages.map(msg => {\r\n      return { value: msg }\r\n    })\r\n  })\r\n\r\n  await producer.disconnect()\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/infrastructure/kafka/kafka.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "kafka",
    "memberof": "students-api/infrastructure/kafka/kafka.js",
    "static": true,
    "longname": "students-api/infrastructure/kafka/kafka.js~kafka",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/kafka/kafka.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "kafka",
    "memberof": "students-api/infrastructure/kafka/kafka.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/infrastructure/kafka/kafka.js~kafka",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/infrastructure/kafka/kafka.js",
    "importStyle": "kafka",
    "description": "Send message to Kafka listeners with this function",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "topic",
        "description": "Kafka topic"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "Messages to send to kafka listeners"
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "students-api/infrastructure/redis/allowlistRefreshToken.js",
    "content": "import redis from 'redis'\r\nimport { promisify } from 'util'\r\n\r\nconst allowlist = redis.createClient({ url: process.env.REDIS_CONNECTION, prefix: 'allowlist-refresh-token:' })\r\n\r\nconst setAsync = promisify(allowlist.set).bind(allowlist)\r\nconst existsAsync = promisify(allowlist.exists).bind(allowlist)\r\nconst getAsync = promisify(allowlist.get).bind(allowlist)\r\nconst delAsync = promisify(allowlist.del).bind(allowlist)\r\n\r\nexport default {\r\n  async add (key, value, expireAt) {\r\n    await setAsync(key, value)\r\n    allowlist.expireAt(key, expireAt)\r\n  },\r\n\r\n  async find (key) {\r\n    return getAsync(key)\r\n  },\r\n\r\n  async has (key) {\r\n    const result = await existsAsync(key)\r\n    return result === 1\r\n  },\r\n\r\n  async delete (key) {\r\n    await delAsync(key)\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/infrastructure/redis/allowlistRefreshToken.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "allowlist",
    "memberof": "students-api/infrastructure/redis/allowlistRefreshToken.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistRefreshToken.js~allowlist",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistRefreshToken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "setAsync",
    "memberof": "students-api/infrastructure/redis/allowlistRefreshToken.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistRefreshToken.js~setAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistRefreshToken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "existsAsync",
    "memberof": "students-api/infrastructure/redis/allowlistRefreshToken.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistRefreshToken.js~existsAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistRefreshToken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "getAsync",
    "memberof": "students-api/infrastructure/redis/allowlistRefreshToken.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistRefreshToken.js~getAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistRefreshToken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "delAsync",
    "memberof": "students-api/infrastructure/redis/allowlistRefreshToken.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistRefreshToken.js~delAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistRefreshToken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "content": "import redis from 'redis'\r\nimport { promisify } from 'util'\r\n\r\nconst allowlist = redis.createClient({ url: process.env.REDIS_CONNECTION, prefix: 'allowlist-signed-routes:' })\r\n\r\nconst setAsync = promisify(allowlist.set).bind(allowlist)\r\nconst existsAsync = promisify(allowlist.exists).bind(allowlist)\r\nconst getAsync = promisify(allowlist.get).bind(allowlist)\r\nconst delAsync = promisify(allowlist.del).bind(allowlist)\r\n\r\nexport default {\r\n  async add (key, value, expireAt) {\r\n    await setAsync(key, value)\r\n    allowlist.expireAt(key, expireAt)\r\n  },\r\n\r\n  async find (key) {\r\n    return getAsync(key)\r\n  },\r\n\r\n  async has (key) {\r\n    const result = await existsAsync(key)\r\n    return result === 1\r\n  },\r\n\r\n  async delete (key) {\r\n    await delAsync(key)\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "allowlist",
    "memberof": "students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistSignedRoutes.js~allowlist",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "setAsync",
    "memberof": "students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistSignedRoutes.js~setAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "existsAsync",
    "memberof": "students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistSignedRoutes.js~existsAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "getAsync",
    "memberof": "students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistSignedRoutes.js~getAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "delAsync",
    "memberof": "students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/allowlistSignedRoutes.js~delAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/allowlistSignedRoutes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "students-api/infrastructure/redis/blocklistAcessToken.js",
    "content": "import redis from 'redis'\r\nimport { promisify } from 'util'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nconst blocklist = redis.createClient({ url: process.env.REDIS_CONNECTION, prefix: 'blocklist-access-token:' })\r\n\r\nconst existsAsync = promisify(blocklist.exists).bind(blocklist)\r\nconst setAsync = promisify(blocklist.set).bind(blocklist)\r\n\r\nexport default {\r\n  add: async token => {\r\n    const expireAt = jwt.decode(token).exp\r\n    await setAsync(token, '')\r\n    blocklist.expireAt(token, expireAt)\r\n  },\r\n  has: async token => {\r\n    const result = await existsAsync(token)\r\n    return result === 1\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/infrastructure/redis/blocklistAcessToken.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "blocklist",
    "memberof": "students-api/infrastructure/redis/blocklistAcessToken.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/blocklistAcessToken.js~blocklist",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/blocklistAcessToken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "existsAsync",
    "memberof": "students-api/infrastructure/redis/blocklistAcessToken.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/blocklistAcessToken.js~existsAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/blocklistAcessToken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "setAsync",
    "memberof": "students-api/infrastructure/redis/blocklistAcessToken.js",
    "static": true,
    "longname": "students-api/infrastructure/redis/blocklistAcessToken.js~setAsync",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/redis/blocklistAcessToken.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "students-api/infrastructure/slack/slack.js",
    "content": "import { WebClient } from '@slack/web-api'\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst web = new WebClient(process.env.SLACK_TOKEN)\r\n\r\n/**\r\n* @desc Send message to a Slack channel with this function\r\n* @param {string} channel - Slack channel\r\n* @param {string} text - Message to send to slack\r\n*/\r\nexport default async function (channel, text) {\r\n  if (!process.env.SLACK_TOKEN) return\r\n  await web.chat.postMessage({ channel, text })\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/infrastructure/slack/slack.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "web",
    "memberof": "students-api/infrastructure/slack/slack.js",
    "static": true,
    "longname": "students-api/infrastructure/slack/slack.js~web",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/infrastructure/slack/slack.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "slack",
    "memberof": "students-api/infrastructure/slack/slack.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/infrastructure/slack/slack.js~slack",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/infrastructure/slack/slack.js",
    "importStyle": "slack",
    "description": "Send message to a Slack channel with this function",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "channel",
        "description": "Slack channel"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Message to send to slack"
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "students-api/middleware/authenticate.js",
    "content": "\r\nimport { accessTokenCheckBlocklist, accessTokenVerifier, refreshTokenDelete, refreshTokenFinder } from '../services/tokenService'\r\n\r\n/**\r\n* @desc Middleware to check if user is not logged (Does not have JWT Token on headers)\r\n* @param {Express.Request} req - Auto injected argument by Express\r\n* @param {Express.Response} res - Auto injected argument by Express\r\n* @param {Function} next - Auto injected function arg by Express\r\n* @return {Object} Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()\r\n* @example\r\n* const middlewares = [ authentication.access ]\r\n*/\r\nexport async function access (req, res, next) {\r\n  const token = req.headers['x-access-token']\r\n\r\n  if (!token) {\r\n    return res.status(403).send({\r\n      message: 'No token provided!'\r\n    })\r\n  }\r\n\r\n  const check = await accessTokenCheckBlocklist(token)\r\n\r\n  if (check) {\r\n    return res.status(401).send({\r\n      message: 'Invalid token!'\r\n    })\r\n  }\r\n\r\n  const { id } = await accessTokenVerifier(token)\r\n\r\n  if (!id) {\r\n    return res.status(401).send({\r\n      message: 'Unauthorized!'\r\n    })\r\n  }\r\n\r\n  req.userId = id\r\n  next()\r\n}\r\n\r\n/**\r\n* @desc Middleware to check if user is logged\r\n* @param {Express.Request} req - Auto injected argument by Express\r\n* @param {Express.Response} res - Auto injected argument by Express\r\n* @param {Function} next - Auto injected function arg by Express\r\n* @return {Object} Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()\r\n* @example\r\n* const middlewares = [ authentication.logged ]\r\n*/\r\nexport async function logged (req, res, next) {\r\n  const token = req.headers['x-access-token']\r\n  if (token) {\r\n    return res.status(403).send({\r\n      message: 'You are already authenticated with token'\r\n    })\r\n  }\r\n\r\n  next()\r\n}\r\n\r\n/**\r\n* @desc Middleware to refresh the JWT token\r\n* @param {Express.Request} req - Auto injected argument by Express\r\n* @param {Express.Response} res - Auto injected argument by Express\r\n* @param {Function} next - Auto injected function arg by Express\r\n* @return {Object} Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()\r\n* @example\r\n* const middlewares = [ authentication.refresh ]\r\n*/\r\nexport async function refresh (req, res, next) {\r\n  const { refreshToken } = req.body\r\n\r\n  if (!refreshToken) {\r\n    return res.status(401).send({\r\n      message: 'No refresh token provided!'\r\n    })\r\n  }\r\n\r\n  const id = await refreshTokenFinder(refreshToken)\r\n\r\n  if (!id) {\r\n    return res.status(401).send({\r\n      message: 'Invalid refresh token'\r\n    })\r\n  }\r\n\r\n  req.userId = id\r\n\r\n  await refreshTokenDelete(refreshToken)\r\n  next()\r\n}\r\n\r\nexport default { access, logged, refresh }\r\n",
    "static": true,
    "longname": "H:/Github/students-api/middleware/authenticate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "access",
    "memberof": "students-api/middleware/authenticate.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/middleware/authenticate.js~access",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/middleware/authenticate.js",
    "importStyle": "{access}",
    "description": "Middleware to check if user is not logged (Does not have JWT Token on headers)",
    "examples": [
      "const middlewares = [ authentication.access ]"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Auto injected function arg by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()"
    }
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "logged",
    "memberof": "students-api/middleware/authenticate.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/middleware/authenticate.js~logged",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/middleware/authenticate.js",
    "importStyle": "{logged}",
    "description": "Middleware to check if user is logged",
    "examples": [
      "const middlewares = [ authentication.logged ]"
    ],
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Auto injected function arg by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()"
    }
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "refresh",
    "memberof": "students-api/middleware/authenticate.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/middleware/authenticate.js~refresh",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/middleware/authenticate.js",
    "importStyle": "{refresh}",
    "description": "Middleware to refresh the JWT token",
    "examples": [
      "const middlewares = [ authentication.refresh ]"
    ],
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Auto injected function arg by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()"
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "students-api/middleware/authorization.js",
    "content": "import { UsersRepository, RolesRepository } from '../repositories'\r\nimport { signatureCheckAllowlist } from '../services/signatureService.js'\r\n\r\n/**\r\n* @desc Middleware to check if route has ?sign= on query and validate the signature\r\n* @param {Express.Request} req - Auto injected argument by Express\r\n* @param {Express.Response} res - Auto injected argument by Express\r\n* @param {Function} next - Auto injected function arg by Express\r\n* @return {Object} Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()\r\n* @example\r\n* const middlewares = [ authorization.signed ]\r\n*/\r\nexport async function signed (req, res, next) {\r\n  const { sign } = req.query\r\n\r\n  if (!sign) {\r\n    return res.status(403).send({\r\n      message: 'No signature provided on query!'\r\n    })\r\n  }\r\n\r\n  const check = await signatureCheckAllowlist(sign)\r\n\r\n  if (!check) {\r\n    return res.status(401).send({\r\n      message: 'Invalid signature!'\r\n    })\r\n  }\r\n\r\n  req.signature = sign\r\n  next()\r\n}\r\n\r\n/**\r\n* @desc Middleware to check if user verified their email\r\n* @param {Request} req - Auto injected argument by Express\r\n* @param {Express.Response} res - Auto injected argument by Express\r\n* @param {Function} next - Auto injected function arg by Express\r\n* @return {Object} Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()\r\n* @example\r\n* const middlewares = [ authorization.verified ]\r\n*/\r\nexport async function verified (req, res, next) {\r\n  const repository = new UsersRepository()\r\n  const check = await repository.checkEmail(req.userId)\r\n\r\n  if (check) {\r\n    return res.status(403).send({\r\n      message: 'You must validate your email before!'\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n* @desc Middleware to check if user has some roles\r\n* @param {string[]} roles - Roles to check\r\n* @return {Object} Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()\r\n* @example\r\n* const middlewares = [authorization.hasRole(['admin', 'moderator'])]\r\n*/\r\nexport const hasRole = (roles = []) => async (req, res, next) => {\r\n  const repository = new UsersRepository()\r\n  const userRole = await repository.getUserRole(req.userId)\r\n\r\n  if (!roles.includes(userRole.role_name)) {\r\n    return res.status(403).send({\r\n      message: 'You don\\'t have role to do this action!'\r\n    })\r\n  }\r\n\r\n  req.userRole = userRole\r\n  next()\r\n}\r\n\r\n/**\r\n* @desc Middleware to check if user has permissions\r\n* @param {string[]} permissions - Permissions to check\r\n* @return {Object} Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()\r\n* @example\r\n* const middlewares = [authorization.hasPermission(['show', 'delete'])]\r\n*/\r\nexport const hasPermission = (permissions = []) => async (req, res, next) => {\r\n  const repository = new RolesRepository()\r\n\r\n  const hasOrNot = permissions.some(async perm => await repository.checkIfRoleHasPermission(req.userId, perm))\r\n\r\n  if (!hasOrNot) {\r\n    return res.status(403).send({\r\n      message: 'You don\\'t have permissions to do this action!'\r\n    })\r\n  }\r\n\r\n  next()\r\n}\r\n\r\nexport default { signed, verified, hasRole, hasPermission }\r\n",
    "static": true,
    "longname": "H:/Github/students-api/middleware/authorization.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "signed",
    "memberof": "students-api/middleware/authorization.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/middleware/authorization.js~signed",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/middleware/authorization.js",
    "importStyle": "{signed}",
    "description": "Middleware to check if route has ?sign= on query and validate the signature",
    "examples": [
      "const middlewares = [ authorization.signed ]"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Auto injected function arg by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()"
    }
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "verified",
    "memberof": "students-api/middleware/authorization.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/middleware/authorization.js~verified",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/middleware/authorization.js",
    "importStyle": "{verified}",
    "description": "Middleware to check if user verified their email",
    "examples": [
      "const middlewares = [ authorization.verified ]"
    ],
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Auto injected function arg by Express"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()"
    }
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "hasRole",
    "memberof": "students-api/middleware/authorization.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/middleware/authorization.js~hasRole",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/middleware/authorization.js",
    "importStyle": "{hasRole}",
    "description": "Middleware to check if user has some roles",
    "examples": [
      "const middlewares = [authorization.hasRole(['admin', 'moderator'])]"
    ],
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "roles",
        "description": "Roles to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()"
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "hasPermission",
    "memberof": "students-api/middleware/authorization.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/middleware/authorization.js~hasPermission",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/middleware/authorization.js",
    "importStyle": "{hasPermission}",
    "description": "Middleware to check if user has permissions",
    "examples": [
      "const middlewares = [authorization.hasPermission(['show', 'delete'])]"
    ],
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "permissions",
        "description": "Permissions to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Only return if doesn't pass the check, otherwise it will pass to the next middleware through next()"
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "students-api/middleware/cors.js",
    "content": "import cors from 'cors'\r\nimport corsConfig from '../config/corsjs'\r\n\r\n/**\r\n * @desc Add cors middleware to entire application\r\n * @param {Object} app Express application context\r\n * @see https://www.npmjs.com/package/cors\r\n * @see https://developer.mozilla.org/pt-BR/docs/Web/HTTP/CORS\r\n * @example\r\n * const app = express()\r\n * cors(app)\r\n */\r\nexport default function (app) {\r\n  app.use((req, res, next) => {\r\n    res.header('Access-Control-Allow-Origin', '*')\r\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE')\r\n    app.use(cors(corsConfig))\r\n    next()\r\n  })\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/middleware/cors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "cors",
    "memberof": "students-api/middleware/cors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/middleware/cors.js~cors",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/middleware/cors.js",
    "importStyle": "cors",
    "description": "Add cors middleware to entire application",
    "examples": [
      "const app = express()\ncors(app)"
    ],
    "see": [
      "https://www.npmjs.com/package/cors",
      "https://developer.mozilla.org/pt-BR/docs/Web/HTTP/CORS"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "Express application context"
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "students-api/middleware/utils.js",
    "content": "/**\r\n* @desc Middleware to get order method (ascending, descending) on query\r\n* @param {Express.Request} req - Auto injected argument by Express\r\n* @param {Express.Response} res - Auto injected argument by Express\r\n* @param {Function} next - Auto injected function arg by Express\r\n* @example\r\n* const middlewares = [ utils.sort ]\r\n*/\r\nexport async function sort (req, res, next) {\r\n  const { sort } = req.query\r\n\r\n  if (!sort) {\r\n    next()\r\n  }\r\n\r\n  const sortTypes = {\r\n    descending: 'DESC',\r\n    ascending: 'ASC'\r\n  }\r\n\r\n  const sortIndex = Object.keys(sortTypes)\r\n    .findIndex(e => e.startsWith(String(sort).toLowerCase()))\r\n\r\n  if (sortIndex !== -1) {\r\n    req.order = Object.values(sortTypes)[sortIndex]\r\n  }\r\n\r\n  next()\r\n}\r\n\r\nexport default { sort }\r\n",
    "static": true,
    "longname": "H:/Github/students-api/middleware/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "sort",
    "memberof": "students-api/middleware/utils.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/middleware/utils.js~sort",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/middleware/utils.js",
    "importStyle": "{sort}",
    "description": "Middleware to get order method (ascending, descending) on query",
    "examples": [
      "const middlewares = [ utils.sort ]"
    ],
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express.Request"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Express.Response"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Auto injected argument by Express"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "Auto injected function arg by Express"
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "students-api/models/class.js",
    "content": "'use strict'\n\nimport { Model } from 'sequelize'\n\n/**\n * @ignore\n */\nexport default (sequelize, DataTypes) => {\n  class Class extends Model {\n    static associate (models) {\n      Class.hasMany(models.Enrollment, {\n        foreignKey: 'class_id',\n        scope: { status: true },\n        as: 'classEnrolls'\n      })\n      Class.belongsTo(models.User, {\n        foreignKey: 'instructor_id'\n      })\n      Class.belongsTo(models.ClassType, {\n        foreignKey: 'classType_id'\n      })\n    }\n  }\n  Class.init({\n    start_date: DataTypes.DATEONLY,\n    instructor_id: DataTypes.INTEGER,\n    classType_id: DataTypes.INTEGER\n  }, {\n    sequelize,\n    paranoid: true,\n    modelName: 'Class'\n  })\n\n  return Class\n}\n",
    "static": true,
    "longname": "H:/Github/students-api/models/class.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "class",
    "memberof": "students-api/models/class.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/models/class.js~class",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/models/class.js",
    "importStyle": "class",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "sequelize",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataTypes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "students-api/models/classtype.js",
    "content": "'use strict'\n\nimport { Model } from 'sequelize'\n\n/**\n * @ignore\n */\nexport default (sequelize, DataTypes) => {\n  class ClassType extends Model {\n    static associate (models) {\n      ClassType.hasMany(models.Class, {\n        foreignKey: 'classType_id'\n      })\n    }\n  }\n  ClassType.init({\n    description: DataTypes.STRING\n  }, {\n    sequelize,\n    paranoid: true,\n    modelName: 'ClassType'\n  })\n  return ClassType\n}\n",
    "static": true,
    "longname": "H:/Github/students-api/models/classtype.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "classtype",
    "memberof": "students-api/models/classtype.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/models/classtype.js~classtype",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/models/classtype.js",
    "importStyle": "classtype",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "sequelize",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataTypes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "students-api/models/enrollment.js",
    "content": "'use strict'\n\nimport { Model } from 'sequelize'\n\n/**\n * @ignore\n */\nexport default (sequelize, DataTypes) => {\n  class Enrollment extends Model {\n    static associate (models) {\n      Enrollment.belongsTo(models.Student, {\n        foreignKey: 'student_id'\n      })\n      Enrollment.belongsTo(models.Class, {\n        foreignKey: 'class_id'\n      })\n    }\n  }\n  Enrollment.init({\n    status: DataTypes.BOOLEAN,\n    student_id: DataTypes.INTEGER,\n    class_id: DataTypes.INTEGER\n  }, {\n    sequelize,\n    paranoid: true,\n    modelName: 'Enrollment',\n    defaultScope: {\n      where: { }\n    },\n    scopes: {\n      confirmed: { where: { status: true } },\n      cancelled: { where: { status: false } }\n    }\n  })\n  return Enrollment\n}\n",
    "static": true,
    "longname": "H:/Github/students-api/models/enrollment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "enrollment",
    "memberof": "students-api/models/enrollment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/models/enrollment.js~enrollment",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/models/enrollment.js",
    "importStyle": "enrollment",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "sequelize",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataTypes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "students-api/models/index.js",
    "content": "'use strict'\n\nimport fs from 'fs'\nimport path from 'path'\nimport { Sequelize } from 'sequelize'\nimport databaseConfig from '../config/database.js'\n\nconst env = process.env.NODE_ENV || 'development'\nconst config = databaseConfig[env]\nconst basename = path.basename(__filename)\nconst database = {}\n\nconst sequelize = new Sequelize(process.env[config.use_env_variable], config)\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => {\n    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js')\n  })\n  .forEach(async file => {\n    const model = (await import(path.join(__dirname, file))).default(m => m(sequelize, Sequelize.DataTypes))\n    database[model.name] = model\n  })\n\nObject.keys(database).forEach(modelName => {\n  if (database[modelName].associate) {\n    database[modelName].associate(database)\n  }\n})\n\ndatabase.sequelize = sequelize\ndatabase.Sequelize = Sequelize\n\nexport default database\n",
    "static": true,
    "longname": "H:/Github/students-api/models/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "env",
    "memberof": "students-api/models/index.js",
    "static": true,
    "longname": "students-api/models/index.js~env",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/models/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "config",
    "memberof": "students-api/models/index.js",
    "static": true,
    "longname": "students-api/models/index.js~config",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/models/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "basename",
    "memberof": "students-api/models/index.js",
    "static": true,
    "longname": "students-api/models/index.js~basename",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/models/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "sequelize",
    "memberof": "students-api/models/index.js",
    "static": true,
    "longname": "students-api/models/index.js~sequelize",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/models/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "database",
    "memberof": "students-api/models/index.js",
    "static": true,
    "longname": "students-api/models/index.js~database",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/models/index.js",
    "importStyle": "database",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "students-api/models/permission.js",
    "content": "'use strict'\n\nimport { Model } from 'sequelize'\n\n/**\n * @ignore\n */\nexport default (sequelize, DataTypes) => {\n  class Permission extends Model {\n    static associate (models) {\n      Permission.belongsToMany(models.Role, {\n        through: 'RolePermissions',\n        as: 'roles',\n        foreignKey: 'perm_id'\n      })\n    }\n  }\n  Permission.init({\n    perm_name: {\n      type: DataTypes.STRING,\n      unique: true,\n      allowNull: false\n    },\n    perm_description: {\n      type: DataTypes.STRING,\n      allowNull: false\n    }\n  }, {\n    sequelize,\n    modelName: 'Permission'\n  })\n  return Permission\n}\n",
    "static": true,
    "longname": "H:/Github/students-api/models/permission.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "permission",
    "memberof": "students-api/models/permission.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/models/permission.js~permission",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/models/permission.js",
    "importStyle": "permission",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "sequelize",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataTypes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "students-api/models/role.js",
    "content": "'use strict'\n\nimport { Model } from 'sequelize'\n\n/**\n * @ignore\n */\nexport default (sequelize, DataTypes) => {\n  class Role extends Model {\n    static associate (models) {\n      Role.hasMany(models.User, {\n        foreignKey: 'role_id'\n      })\n      Role.belongsToMany(models.Permission, {\n        through: 'RolePermissions',\n        as: 'permissions',\n        foreignKey: 'role_id'\n      })\n    }\n  }\n  Role.init({\n    role_name: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      unique: true\n    },\n    role_description: {\n      type: DataTypes.STRING,\n      allowNull: false\n    }\n  }, {\n    sequelize,\n    modelName: 'Role'\n  })\n  return Role\n}\n",
    "static": true,
    "longname": "H:/Github/students-api/models/role.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "role",
    "memberof": "students-api/models/role.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/models/role.js~role",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/models/role.js",
    "importStyle": "role",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "sequelize",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataTypes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "students-api/models/rolepermission.js",
    "content": "'use strict'\n\nimport { Model } from 'sequelize'\nimport { RolepermissionsRepository } from '../repositories'\n\n/**\n * @ignore\n */\nexport default (sequelize, DataTypes) => {\n  class RolePermission extends Model {\n    /**\n     * Helper method for defining associations.\n     * This method is not a part of Sequelize lifecycle.\n     * The `models/index` file will call this method automatically.\n     */\n    static associate (models) {\n      // define association here\n    }\n  }\n  RolePermission.init({\n    role_id: {\n      type: DataTypes.INTEGER,\n      allowNull: false\n    },\n    perm_id: {\n      type: DataTypes.INTEGER,\n      allowNull: false\n    }\n  }, {\n    sequelize,\n    modelName: 'RolePermission',\n    timestamps: false,\n    hooks: {\n      beforeCreate: async (rolePermission) => {\n        const rolePermissionRepository = new RolepermissionsRepository()\n        const rolePermissionChecker = await rolePermissionRepository.getOne({\n          role_id: rolePermission.role_id,\n          perm_id: rolePermission.perm_id\n        })\n\n        if (rolePermissionChecker) {\n          throw new Error('RolePermission already exists')\n        }\n      }\n    }\n  })\n  return RolePermission\n}\n",
    "static": true,
    "longname": "H:/Github/students-api/models/rolepermission.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "rolepermission",
    "memberof": "students-api/models/rolepermission.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/models/rolepermission.js~rolepermission",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/models/rolepermission.js",
    "importStyle": "rolepermission",
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "sequelize",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataTypes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "students-api/models/student.js",
    "content": "'use strict'\n\nimport { Model } from 'sequelize'\n\n/**\n * @ignore\n */\nexport default (sequelize, DataTypes) => {\n  class Student extends Model {\n    static associate (models) {\n      Student.hasMany(models.Enrollment, {\n        foreignKey: 'student_id',\n        scope: { status: true },\n        as: 'studentEnrolls'\n      })\n    }\n  }\n  Student.init({\n    name: {\n      type: DataTypes.STRING,\n      validate: {\n        validator: function (data) {\n          if (data.length < 3) {\n            throw new Error('Name should have more than 3 characters')\n          }\n        }\n      }\n    },\n    email: {\n      type: DataTypes.STRING,\n      unique: true,\n      validate: {\n        isEmail: {\n          args: true,\n          msg: 'Invalid email'\n        }\n      }\n    },\n    active: DataTypes.BOOLEAN\n  }, {\n    sequelize,\n    paranoid: true,\n    modelName: 'Student',\n    defaultScope: {\n      where: { }\n    },\n    scopes: {\n      active: { where: { active: true } },\n      inactive: { where: { active: false } }\n    }\n  })\n  return Student\n}\n",
    "static": true,
    "longname": "H:/Github/students-api/models/student.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "student",
    "memberof": "students-api/models/student.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/models/student.js~student",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/models/student.js",
    "importStyle": "student",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "sequelize",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataTypes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "students-api/models/user.js",
    "content": "'use strict'\n\nimport { Model } from 'sequelize'\nimport bcrypt from 'bcrypt'\n\n/**\n * @ignore\n */\nexport default (sequelize, DataTypes) => {\n  class User extends Model {\n    static associate (models) {\n      User.hasMany(models.Class, {\n        foreignKey: 'instructor_id'\n      })\n\n      User.belongsTo(models.Role, {\n        foreignKey: 'role_id',\n        as: 'role'\n      })\n    }\n  }\n  User.init({\n    role_id: DataTypes.INTEGER,\n    username: DataTypes.STRING,\n    password: DataTypes.STRING,\n    email: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      unique: true,\n      validate: {\n        isEmail: {\n          args: true,\n          msg: 'Invalid email'\n        }\n      }\n    },\n    email_verification: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: false\n    }\n  }, {\n    sequelize,\n    modelName: 'User',\n    defaultScope: {\n      attributes: { exclude: ['password'] }\n    },\n    scopes: {\n      withPassword: { attributes: { } }\n    },\n    hooks: {\n      beforeCreate: async (user) => {\n        user.email_verification = false\n        if (user.password) {\n          const salt = await bcrypt.genSaltSync(10, 'a')\n          user.password = bcrypt.hashSync(user.password, salt)\n        }\n      },\n      beforeUpdate: async (user) => {\n        if (user.password) {\n          const salt = await bcrypt.genSaltSync(10, 'a')\n          user.password = bcrypt.hashSync(user.password, salt)\n        }\n      }\n    }\n  })\n\n  User.prototype.validPassword = async (password, hash) => {\n    return await bcrypt.compareSync(password, hash)\n  }\n\n  return User\n}\n",
    "static": true,
    "longname": "H:/Github/students-api/models/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "user",
    "memberof": "students-api/models/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/models/user.js~user",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/models/user.js",
    "importStyle": "user",
    "description": "",
    "lineNumber": 9,
    "ignore": true,
    "params": [
      {
        "name": "sequelize",
        "types": [
          "*"
        ]
      },
      {
        "name": "DataTypes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "students-api/repositories/classesRepository.js",
    "content": "import { Repository } from './repository.js'\r\nimport { EnrollmentsRepository } from './enrollmentsRepository.js'\r\nimport { Sequelize } from 'sequelize'\r\n\r\n/**\r\n * @desc Repository with specific logic to Classes table from database\r\n * @extends {Repository}\r\n*/\r\nexport class ClassesRepository extends Repository {\r\n  /**\r\n   * @desc Instantiate base repository with the model name, basically it is a shortcut\r\n   * @example\r\n   * // Instead of\r\n   * const classRepository = new Repository('Class')\r\n   *\r\n   * // You can do\r\n   * const classRepository2 = new ClassesRepository()\r\n   */\r\n  constructor () {\r\n    super('Class')\r\n    this.enrollments = new EnrollmentsRepository()\r\n  }\r\n\r\n  /**\r\n   * @desc Get all canceled enrolls from a class\r\n   * @param {number} classId - Class Id\r\n   * @return {Array} Cancelled enrolls\r\n   */\r\n  async getOneWithCancelledEnrolls (classId) {\r\n    return this.enrollments.getCancelledEnrolls({ class_id: classId })\r\n  }\r\n\r\n  /**\r\n   * @desc Get all confirmed enrolls from a class\r\n   * @param {number} classId - Class Id\r\n   * @return {Array} Confirmed enrolls\r\n   */\r\n  async getOneWithConfirmedEnrolls (classId) {\r\n    return this.enrollments.getConfirmedEnrolls({ class_id: classId })\r\n  }\r\n\r\n  /**\r\n   * @desc Get all active classes which are fullfied based on maxStudents per class\r\n   * @param {number} maxStudents - Max students filter condition\r\n   * @returns {{count:number, rows:array }} The classes and the count\r\n   */\r\n  async getFullfied (maxStudents) {\r\n    return super.getManyAndCount({ status: true },\r\n      {\r\n        attributes: ['class_id'],\r\n        group: ['class_id'],\r\n        having: Sequelize.literal(`count(class_id) >= ${maxStudents}`)\r\n      })\r\n  }\r\n\r\n  /**\r\n   * @desc Get all enrolls from a class\r\n   * @param {number} classId - Class Id\r\n   * @param {Object} [where={}] - Extra filter condition\r\n   * @return {Array} Enrolls\r\n   */\r\n  async getEnrollments (classId, where = {}) {\r\n    return super.getOne({ ...where, id: classId }).getClassEnrolls()\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/classesRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "ClassesRepository",
    "memberof": "students-api/repositories/classesRepository.js",
    "static": true,
    "longname": "students-api/repositories/classesRepository.js~ClassesRepository",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/repositories/classesRepository.js",
    "importStyle": "{ClassesRepository}",
    "description": "Repository with specific logic to Classes table from database",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "Repository"
    ]
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/repositories/classesRepository.js~ClassesRepository",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/repositories/classesRepository.js~ClassesRepository#constructor",
    "access": "public",
    "description": "Instantiate base repository with the model name, basically it is a shortcut",
    "examples": [
      "// Instead of\nconst classRepository = new Repository('Class')\n\n// You can do\nconst classRepository2 = new ClassesRepository()"
    ],
    "lineNumber": 19
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "enrollments",
    "memberof": "students-api/repositories/classesRepository.js~ClassesRepository",
    "static": false,
    "longname": "students-api/repositories/classesRepository.js~ClassesRepository#enrollments",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "getOneWithCancelledEnrolls",
    "memberof": "students-api/repositories/classesRepository.js~ClassesRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/classesRepository.js~ClassesRepository#getOneWithCancelledEnrolls",
    "access": "public",
    "description": "Get all canceled enrolls from a class",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "classId",
        "description": "Class Id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Cancelled enrolls"
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "getOneWithConfirmedEnrolls",
    "memberof": "students-api/repositories/classesRepository.js~ClassesRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/classesRepository.js~ClassesRepository#getOneWithConfirmedEnrolls",
    "access": "public",
    "description": "Get all confirmed enrolls from a class",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "classId",
        "description": "Class Id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Confirmed enrolls"
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "getFullfied",
    "memberof": "students-api/repositories/classesRepository.js~ClassesRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/classesRepository.js~ClassesRepository#getFullfied",
    "access": "public",
    "description": "Get all active classes which are fullfied based on maxStudents per class",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{count:number, rows:array }} The classes and the count"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxStudents",
        "description": "Max students filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{count:number, rows:array }"
      ],
      "spread": false,
      "description": "The classes and the count"
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "getEnrollments",
    "memberof": "students-api/repositories/classesRepository.js~ClassesRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/classesRepository.js~ClassesRepository#getEnrollments",
    "access": "public",
    "description": "Get all enrolls from a class",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "classId",
        "description": "Class Id"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Extra filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Enrolls"
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "students-api/repositories/classtypesRepository.js",
    "content": "import { Repository } from './repository.js'\r\n\r\n/**\r\n * @desc Repository with specific logic to Classtypes table from database\r\n * @extends {Repository}\r\n*/\r\nexport class ClasstypesRepository extends Repository {\r\n  /**\r\n   * @desc Instantiate base repository with the model name, basically it is a shortcut\r\n   * @example\r\n   * // Instead of\r\n   * const classtypesRepository = new Repository('ClassType')\r\n   *\r\n   * // You can do\r\n   * const classtypesRepository2 = new ClasstypesRepository()\r\n   */\r\n  constructor () {\r\n    super('ClassType')\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/classtypesRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "ClasstypesRepository",
    "memberof": "students-api/repositories/classtypesRepository.js",
    "static": true,
    "longname": "students-api/repositories/classtypesRepository.js~ClasstypesRepository",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/repositories/classtypesRepository.js",
    "importStyle": "{ClasstypesRepository}",
    "description": "Repository with specific logic to Classtypes table from database",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Repository"
    ]
  },
  {
    "__docId__": 192,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/repositories/classtypesRepository.js~ClasstypesRepository",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/repositories/classtypesRepository.js~ClasstypesRepository#constructor",
    "access": "public",
    "description": "Instantiate base repository with the model name, basically it is a shortcut",
    "examples": [
      "// Instead of\nconst classtypesRepository = new Repository('ClassType')\n\n// You can do\nconst classtypesRepository2 = new ClasstypesRepository()"
    ],
    "lineNumber": 17
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "students-api/repositories/enrollmentsRepository.js",
    "content": "import { Repository, database } from './repository.js'\r\n\r\n/**\r\n * @desc Repository with specific logic to Enrollments table from database\r\n * @extends {Repository}\r\n*/\r\nexport class EnrollmentsRepository extends Repository {\r\n  /**\r\n   * @desc Instantiate base repository with the model name, basically it is a shortcut\r\n   * @example\r\n   * // Instead of\r\n   * const enrollmentsRepository = new Repository('Enrollment')\r\n   *\r\n   * // You can do\r\n   * const enrollmentsRepository2 = new EnrollmentsRepository()\r\n   */\r\n  constructor () {\r\n    super('Enrollment')\r\n  }\r\n\r\n  /**\r\n   * @desc Get all cancelled enrolls\r\n   * @param {Object} [where={}] - Extra filter condition\r\n   * @return {Array} Cancelled enrolls\r\n   */\r\n  async getCancelledEnrolls (where = {}) {\r\n    return database[this.model].scope('cancelled').findAll({ where: { ...where } })\r\n  }\r\n\r\n  /**\r\n   * @desc Get all confirmed enrolls\r\n   * @param {Object} [where={}] - Extra filter condition\r\n   * @return {Array} Confirmed enrolls\r\n   */\r\n  async getConfirmedEnrolls (where = {}) {\r\n    return database[this.model].scope('confirmed').findAll({ where: { ...where } })\r\n  }\r\n\r\n  /**\r\n   * @desc Get all student enrollments\r\n   * @param {number} studentId - Student id\r\n   * @param {Object} [where={}] - Extra filter condition\r\n   * @return {Array} Student enrollments\r\n   */\r\n  async getStudentEnrolls (studentId, where = {}) {\r\n    return super.getMany({ ...where, student_id: studentId })\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/enrollmentsRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "class",
    "name": "EnrollmentsRepository",
    "memberof": "students-api/repositories/enrollmentsRepository.js",
    "static": true,
    "longname": "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/repositories/enrollmentsRepository.js",
    "importStyle": "{EnrollmentsRepository}",
    "description": "Repository with specific logic to Enrollments table from database",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Repository"
    ]
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository#constructor",
    "access": "public",
    "description": "Instantiate base repository with the model name, basically it is a shortcut",
    "examples": [
      "// Instead of\nconst enrollmentsRepository = new Repository('Enrollment')\n\n// You can do\nconst enrollmentsRepository2 = new EnrollmentsRepository()"
    ],
    "lineNumber": 17
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "getCancelledEnrolls",
    "memberof": "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository#getCancelledEnrolls",
    "access": "public",
    "description": "Get all cancelled enrolls",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Extra filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Cancelled enrolls"
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "getConfirmedEnrolls",
    "memberof": "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository#getConfirmedEnrolls",
    "access": "public",
    "description": "Get all confirmed enrolls",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Extra filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Confirmed enrolls"
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "getStudentEnrolls",
    "memberof": "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/enrollmentsRepository.js~EnrollmentsRepository#getStudentEnrolls",
    "access": "public",
    "description": "Get all student enrollments",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "studentId",
        "description": "Student id"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Extra filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Student enrollments"
    }
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "students-api/repositories/index.js",
    "content": "export { StudentRepository } from './studentRepository.js'\r\nexport { ClassesRepository } from './classesRepository.js'\r\nexport { EnrollmentsRepository } from './enrollmentsRepository.js'\r\nexport { ClasstypesRepository } from './classtypesRepository.js'\r\nexport { UsersRepository } from './usersRepository.js'\r\nexport { RolesRepository } from './rolesRepository.js'\r\nexport { RolepermissionsRepository } from './rolepermissionsRepository.js'\r\nexport { PermissionsRepository } from './permissionsRepository.js'\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "students-api/repositories/permissionsRepository.js",
    "content": "import { Repository } from './repository.js'\r\n\r\n/**\r\n * @desc Repository with specific logic to Permissions table from database\r\n * @extends {Repository}\r\n*/\r\nexport class PermissionsRepository extends Repository {\r\n  /**\r\n   * @desc Instantiate base repository with the model name, basically it is a shortcut\r\n   * @example\r\n   * // Instead of\r\n   * const permissionsRepository = new Repository('Permission')\r\n   *\r\n   * // You can do\r\n   * const permissionsRepository2 = new RolesRepository()\r\n   */\r\n  constructor () {\r\n    super('Permission')\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/permissionsRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "class",
    "name": "PermissionsRepository",
    "memberof": "students-api/repositories/permissionsRepository.js",
    "static": true,
    "longname": "students-api/repositories/permissionsRepository.js~PermissionsRepository",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/repositories/permissionsRepository.js",
    "importStyle": "{PermissionsRepository}",
    "description": "Repository with specific logic to Permissions table from database",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Repository"
    ]
  },
  {
    "__docId__": 202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/repositories/permissionsRepository.js~PermissionsRepository",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/repositories/permissionsRepository.js~PermissionsRepository#constructor",
    "access": "public",
    "description": "Instantiate base repository with the model name, basically it is a shortcut",
    "examples": [
      "// Instead of\nconst permissionsRepository = new Repository('Permission')\n\n// You can do\nconst permissionsRepository2 = new RolesRepository()"
    ],
    "lineNumber": 17
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "students-api/repositories/repository.js",
    "content": "import database from '../models'\r\n\r\n/**\r\n * @desc Repository which contains database access and common operations\r\n * @abstract\r\n */\r\nexport class Repository {\r\n  /**\r\n   * @desc Initialize a new repository\r\n   * @param {string} model - The model name that will be accessed in database operations\r\n   * @example\r\n   * const repository = new Repository('User')\r\n   * const user = await repository.getOne({ id: 1 })\r\n   */\r\n  constructor (model) {\r\n    /**\r\n     * @desc Model name\r\n     */\r\n    this.model = model\r\n  }\r\n\r\n  /**\r\n   * @desc Get many records from database based on filter condition\r\n   * @param {Object} [where={}] - Filter condition\r\n   * @param {Object} [order={}] - Order by\r\n   * @returns {Array}\r\n   * @example\r\n   * const models = await repository.getMany({ role_id: 5 }, { createdAt: 'DESC' })\r\n   */\r\n  async getMany (where = {}, order = []) {\r\n    return database[this.model].findAll({ where: { ...where }, order })\r\n  }\r\n\r\n  /**\r\n   * @desc Get one record from database based on filter condition\r\n   * @param {Object} [where={}] - Filter condition\r\n   * @returns {Object}\r\n   * @example\r\n   * const model = await repository.getOne({ role_id: 5 })\r\n   */\r\n  async getOne (where = {}) {\r\n    return database[this.model].findOne({ where: { ...where } })\r\n  }\r\n\r\n  /**\r\n   * @desc Create a new record on database\r\n   * @param {Object} data - New model data\r\n   * @returns {Object} The new object\r\n   * @example\r\n   * const createdModel = await repository.create({ email: 'example@gmail.com', password: '123456678' })\r\n   */\r\n  async create (data) {\r\n    return database[this.model].create(data)\r\n  }\r\n\r\n  /**\r\n   * @desc Update one record from database based on filter condition\r\n   * @param {Object} updatedData - Updated data\r\n   * @param {Object} [where={}] - Filter condition\r\n   * @param {Object} [transaction={}] - The current transaction, argument used when needed to perform many actions on same transaction\r\n   * @example\r\n   * await repository.updateOne(data, { id: 5})\r\n   */\r\n  async updateOne (updatedData, where, transaction = {}) {\r\n    database[this.model]\r\n      .update(updatedData, { where: { ...where } }, transaction)\r\n  }\r\n\r\n  /**\r\n   * @desc Delete a record from database based on filter condition\r\n   * @param {Object} [where={}] - Filter condition\r\n   * @example\r\n   * await repository.deleteOne({ id: 5 })\r\n   */\r\n  async deleteOne (where = {}) {\r\n    database[this.model].destroy({ where: { ...where } })\r\n  }\r\n\r\n  /**\r\n   * @desc Recover a record from database based on filter condition\r\n   * @param {Object} [where={}] - Filter condition\r\n   * @return {Object} The recovered record\r\n   * @example\r\n   * const recovered = await repository.recoverOne({ id: 5 })\r\n   */\r\n  async recoverOne (where = {}) {\r\n    return database[this.model].restore({ where: { ...where } })\r\n  }\r\n\r\n  /**\r\n   * @desc Get deleted record from database based on filter condition\r\n   * @param {Object} [where={}] - Filter condition\r\n   * @return {Object} The deleted record\r\n   * @example\r\n   * const deleted = await repository.getDeleted({ id: 5 })\r\n   */\r\n  async getDeleted (where = {}) {\r\n    return database[this.model]\r\n      .findOne({ paranoid: false, where: { ...where } })\r\n  }\r\n\r\n  /**\r\n   * @desc Get many records from database and count\r\n   * @param {Object} [where={}] - Filter condition\r\n   * @param {Object} [aggregators] - Agreggators (group_by)\r\n   * @returns {{count:number, rows:array }} The group objects and the count\r\n   * @example\r\n   * const { rows, models } = await repository.getManyAndCount({ status: true }, { attributes: ['class_id'], group: ['class_id'], having: Sequelize.literal(`count(class_id) >= ${maxStudents}`)})\r\n   */\r\n  async getManyAndCount (where = {}, aggregators) {\r\n    return database[this.model]\r\n      .findAndCountAll({ where: { ...where }, ...aggregators })\r\n  }\r\n}\r\n\r\nexport { database }\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/repository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "class",
    "name": "Repository",
    "memberof": "students-api/repositories/repository.js",
    "static": true,
    "longname": "students-api/repositories/repository.js~Repository",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/repositories/repository.js",
    "importStyle": "{Repository}",
    "description": "Repository which contains database access and common operations",
    "lineNumber": 7,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 205,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/repositories/repository.js~Repository",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#constructor",
    "access": "public",
    "description": "Initialize a new repository",
    "examples": [
      "const repository = new Repository('User')\nconst user = await repository.getOne({ id: 1 })"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "The model name that will be accessed in database operations"
      }
    ]
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "model",
    "memberof": "students-api/repositories/repository.js~Repository",
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#model",
    "access": "public",
    "description": "Model name",
    "lineNumber": 19,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "getMany",
    "memberof": "students-api/repositories/repository.js~Repository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#getMany",
    "access": "public",
    "description": "Get many records from database based on filter condition",
    "examples": [
      "const models = await repository.getMany({ role_id: 5 }, { createdAt: 'DESC' })"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Filter condition"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "order",
        "description": "Order by"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "getOne",
    "memberof": "students-api/repositories/repository.js~Repository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#getOne",
    "access": "public",
    "description": "Get one record from database based on filter condition",
    "examples": [
      "const model = await repository.getOne({ role_id: 5 })"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "create",
    "memberof": "students-api/repositories/repository.js~Repository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#create",
    "access": "public",
    "description": "Create a new record on database",
    "examples": [
      "const createdModel = await repository.create({ email: 'example@gmail.com', password: '123456678' })"
    ],
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The new object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "New model data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The new object"
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "updateOne",
    "memberof": "students-api/repositories/repository.js~Repository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#updateOne",
    "access": "public",
    "description": "Update one record from database based on filter condition",
    "examples": [
      "await repository.updateOne(data, { id: 5})"
    ],
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "updatedData",
        "description": "Updated data"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Filter condition"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "transaction",
        "description": "The current transaction, argument used when needed to perform many actions on same transaction"
      }
    ],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "deleteOne",
    "memberof": "students-api/repositories/repository.js~Repository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#deleteOne",
    "access": "public",
    "description": "Delete a record from database based on filter condition",
    "examples": [
      "await repository.deleteOne({ id: 5 })"
    ],
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Filter condition"
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "recoverOne",
    "memberof": "students-api/repositories/repository.js~Repository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#recoverOne",
    "access": "public",
    "description": "Recover a record from database based on filter condition",
    "examples": [
      "const recovered = await repository.recoverOne({ id: 5 })"
    ],
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The recovered record"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "getDeleted",
    "memberof": "students-api/repositories/repository.js~Repository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#getDeleted",
    "access": "public",
    "description": "Get deleted record from database based on filter condition",
    "examples": [
      "const deleted = await repository.getDeleted({ id: 5 })"
    ],
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The deleted record"
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "getManyAndCount",
    "memberof": "students-api/repositories/repository.js~Repository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/repository.js~Repository#getManyAndCount",
    "access": "public",
    "description": "Get many records from database and count",
    "examples": [
      "const { rows, models } = await repository.getManyAndCount({ status: true }, { attributes: ['class_id'], group: ['class_id'], having: Sequelize.literal(`count(class_id) >= ${maxStudents}`)})"
    ],
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{count:number, rows:array }} The group objects and the count"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Filter condition"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "aggregators",
        "description": "Agreggators (group_by)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{count:number, rows:array }"
      ],
      "spread": false,
      "description": "The group objects and the count"
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "students-api/repositories/rolepermissionsRepository.js",
    "content": "import { Repository } from './repository.js'\r\n\r\n/**\r\n * @desc Repository with specific logic to RolePermissions table from database\r\n * @extends {Repository}\r\n*/\r\nexport class RolepermissionsRepository extends Repository {\r\n  /**\r\n   * @desc Instantiate base repository with the model name, basically it is a shortcut\r\n   * @example\r\n   * // Instead of\r\n   * const rolepermissionsRepository = new Repository('RolePermission')\r\n   *\r\n   * // You can do\r\n   * const rolepermissionsRepository2 = new RolepermissionsRepository()\r\n   */\r\n  constructor () {\r\n    super('RolePermission')\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/rolepermissionsRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "RolepermissionsRepository",
    "memberof": "students-api/repositories/rolepermissionsRepository.js",
    "static": true,
    "longname": "students-api/repositories/rolepermissionsRepository.js~RolepermissionsRepository",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/repositories/rolepermissionsRepository.js",
    "importStyle": "{RolepermissionsRepository}",
    "description": "Repository with specific logic to RolePermissions table from database",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Repository"
    ]
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/repositories/rolepermissionsRepository.js~RolepermissionsRepository",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/repositories/rolepermissionsRepository.js~RolepermissionsRepository#constructor",
    "access": "public",
    "description": "Instantiate base repository with the model name, basically it is a shortcut",
    "examples": [
      "// Instead of\nconst rolepermissionsRepository = new Repository('RolePermission')\n\n// You can do\nconst rolepermissionsRepository2 = new RolepermissionsRepository()"
    ],
    "lineNumber": 17
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "students-api/repositories/rolesRepository.js",
    "content": "import { Repository, database } from './repository.js'\r\n\r\n/**\r\n * @desc Repository with specific logic to Roles table from database\r\n * @extends {Repository}\r\n*/\r\nexport class RolesRepository extends Repository {\r\n  /**\r\n   * @desc Instantiate base repository with the model name, basically it is a shortcut\r\n   * @example\r\n   * // Instead of\r\n   * const rolesRepository = new Repository('Role')\r\n   *\r\n   * // You can do\r\n   * const rolesRepository2 = new RolesRepository()\r\n   */\r\n  constructor () {\r\n    super('Role')\r\n  }\r\n\r\n  /**\r\n   * @desc Check if role has a permission associated\r\n   * @param {*} roleId - Role id\r\n   * @param {*} permName - Permission name\r\n   * @return {boolean}\r\n   */\r\n  async checkIfRoleHasPermission (roleId, permName) {\r\n    const perm = await database[this.model].findOne({\r\n      where: {\r\n        id: roleId\r\n      },\r\n      include: {\r\n        model: database.Permission,\r\n        where: {\r\n          perm_name: permName\r\n        }\r\n      }\r\n    })\r\n\r\n    return perm != null\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/rolesRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "class",
    "name": "RolesRepository",
    "memberof": "students-api/repositories/rolesRepository.js",
    "static": true,
    "longname": "students-api/repositories/rolesRepository.js~RolesRepository",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/repositories/rolesRepository.js",
    "importStyle": "{RolesRepository}",
    "description": "Repository with specific logic to Roles table from database",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Repository"
    ]
  },
  {
    "__docId__": 220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/repositories/rolesRepository.js~RolesRepository",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/repositories/rolesRepository.js~RolesRepository#constructor",
    "access": "public",
    "description": "Instantiate base repository with the model name, basically it is a shortcut",
    "examples": [
      "// Instead of\nconst rolesRepository = new Repository('Role')\n\n// You can do\nconst rolesRepository2 = new RolesRepository()"
    ],
    "lineNumber": 17
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "checkIfRoleHasPermission",
    "memberof": "students-api/repositories/rolesRepository.js~RolesRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/rolesRepository.js~RolesRepository#checkIfRoleHasPermission",
    "access": "public",
    "description": "Check if role has a permission associated",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "roleId",
        "description": "Role id"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "permName",
        "description": "Permission name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "students-api/repositories/studentRepository.js",
    "content": "import { Repository, database } from './repository.js'\r\nimport { EnrollmentsRepository } from './enrollmentsRepository.js'\r\n\r\n/**\r\n * @desc Repository with specific logic to Students table from database\r\n * @extends {Repository}\r\n*/\r\nexport class StudentRepository extends Repository {\r\n  /**\r\n   * @desc Instantiate base repository with the model name, basically it is a shortcut\r\n   * @example\r\n   * // Instead of\r\n   * const studentsRepository = new Repository('Student')\r\n   *\r\n   * // You can do\r\n   * const studentsRepository2 = new StudentsRepository()\r\n   */\r\n  constructor () {\r\n    super('Student')\r\n    this.enrollments = new EnrollmentsRepository()\r\n  }\r\n\r\n  /**\r\n   * @desc Get many active students\r\n   * @param {Object} [where={}] - Other optional filter condition\r\n   * @return {Array} Active students\r\n   */\r\n  async getOnlyActive (where = {}) {\r\n    return database[this.model].scope('active').findAll({ where: { ...where } })\r\n  }\r\n\r\n  /**\r\n   * @desc Get many inactive students\r\n   * @param {Object} [where={}] - Other optional filter condition\r\n   * @return {Array} Inactive students\r\n   */\r\n  async getOnlyInactive (where = {}) {\r\n    return database[this.model].scope('inactive').findAll({ where: { ...where } })\r\n  }\r\n\r\n  /**\r\n   * @desc Deactivate student and unenroll student from classes\r\n   * @param {number} studentId - Student id\r\n   */\r\n  async deactivateAndUnenrollStudent (studentId) {\r\n    database.sequelize.transaction(async transaction => {\r\n      await super.updateOne({ active: false }, { id: studentId }, { transaction })\r\n      await this.enrollments.updateMany({ status: false }, { student_id: studentId }, { transaction })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @desc Reactivate student and reenroll student from classes\r\n   * @param {number} studentId - Student id\r\n   */\r\n  async reactivateAndRenrollStudent (studentId) {\r\n    database.sequelize.transaction(async transaction => {\r\n      await super.updateOne({ active: true }, studentId, { transaction })\r\n      await this.enrollments.updateMany({ status: true }, { student_id: studentId }, { transaction })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Delete student and enrolls associated\r\n   * @param {Object} [where={}] Condition to delete\r\n   * @override\r\n   */\r\n  async deleteOne (where = {}) {\r\n    this.deactivateAndUnenrollStudent(where.id)\r\n    super.deleteOne(where)\r\n  }\r\n\r\n  /**\r\n   * @desc Get all enrollments from a student\r\n   * @param {Object} [where={}] - Other optional filter condition\r\n   * @return {Array} Enrollments\r\n   */\r\n  async getStudentEnrollments (where = {}) {\r\n    return super.getOne(where).getStudentEnrolls()\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/studentRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "class",
    "name": "StudentRepository",
    "memberof": "students-api/repositories/studentRepository.js",
    "static": true,
    "longname": "students-api/repositories/studentRepository.js~StudentRepository",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/repositories/studentRepository.js",
    "importStyle": "{StudentRepository}",
    "description": "Repository with specific logic to Students table from database",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "Repository"
    ]
  },
  {
    "__docId__": 224,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/repositories/studentRepository.js~StudentRepository",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/repositories/studentRepository.js~StudentRepository#constructor",
    "access": "public",
    "description": "Instantiate base repository with the model name, basically it is a shortcut",
    "examples": [
      "// Instead of\nconst studentsRepository = new Repository('Student')\n\n// You can do\nconst studentsRepository2 = new StudentsRepository()"
    ],
    "lineNumber": 18
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "enrollments",
    "memberof": "students-api/repositories/studentRepository.js~StudentRepository",
    "static": false,
    "longname": "students-api/repositories/studentRepository.js~StudentRepository#enrollments",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "getOnlyActive",
    "memberof": "students-api/repositories/studentRepository.js~StudentRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/studentRepository.js~StudentRepository#getOnlyActive",
    "access": "public",
    "description": "Get many active students",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Other optional filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Active students"
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "getOnlyInactive",
    "memberof": "students-api/repositories/studentRepository.js~StudentRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/studentRepository.js~StudentRepository#getOnlyInactive",
    "access": "public",
    "description": "Get many inactive students",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Other optional filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Inactive students"
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "deactivateAndUnenrollStudent",
    "memberof": "students-api/repositories/studentRepository.js~StudentRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/studentRepository.js~StudentRepository#deactivateAndUnenrollStudent",
    "access": "public",
    "description": "Deactivate student and unenroll student from classes",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "studentId",
        "description": "Student id"
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "reactivateAndRenrollStudent",
    "memberof": "students-api/repositories/studentRepository.js~StudentRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/studentRepository.js~StudentRepository#reactivateAndRenrollStudent",
    "access": "public",
    "description": "Reactivate student and reenroll student from classes",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "studentId",
        "description": "Student id"
      }
    ],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "deleteOne",
    "memberof": "students-api/repositories/studentRepository.js~StudentRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/studentRepository.js~StudentRepository#deleteOne",
    "access": "public",
    "description": "Delete student and enrolls associated",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Condition to delete"
      }
    ],
    "override": true,
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "getStudentEnrollments",
    "memberof": "students-api/repositories/studentRepository.js~StudentRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/studentRepository.js~StudentRepository#getStudentEnrollments",
    "access": "public",
    "description": "Get all enrollments from a student",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Other optional filter condition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Enrollments"
    }
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "students-api/repositories/usersRepository.js",
    "content": "import { Repository, database } from './repository.js'\r\n\r\n/**\r\n * @desc Repository with specific logic to Users table from database\r\n * @extends {Repository}\r\n*/\r\nexport class UsersRepository extends Repository {\r\n  /**\r\n   * @desc Instantiate base repository with the model name, basically it is a shortcut\r\n   * @example\r\n   * // Instead of\r\n   * const usersRepository = new Repository('User')\r\n   *\r\n   * // You can do\r\n   * const usersRepository2 = new UsersRepository()\r\n   */\r\n  constructor () {\r\n    super('User')\r\n  }\r\n\r\n  /**\r\n   * @desc Authentication method, it verifies if login fields are valid and matches with database\r\n   * @param {Object} body\r\n   * @param {string} body.password - Login password\r\n   * @param {string} body.email - Login email\r\n   * @param {string} body.username - Login username\r\n   * @throws {InvalidBodyError} throw when body does not have required fields\r\n   * @throws {InvalidArgumentError} throw when body field has invalid or non exist value\r\n   * @return {?User}\r\n   */\r\n  async authenticate (body) {\r\n    if (!('password' in body)) {\r\n      throw new Error('Password is required')\r\n    }\r\n\r\n    if ('email' in body) {\r\n      return this.authenticateByEmail(body.email, body.password)\r\n    } else if ('username' in body) {\r\n      return this.authenticateByUsername(body.username, body.password)\r\n    } else {\r\n      throw new Error('Username or Email is required')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  async authenticateByUsername (username, password) {\r\n    const user = await database[this.model].scope('withPassword').findOne({ where: { username } })\r\n\r\n    if (user != null) {\r\n      const isAuth = user.validPassword(password, user.password)\r\n\r\n      if (!isAuth) {\r\n        throw new Error('Password is wrong')\r\n      }\r\n\r\n      return user\r\n    } else {\r\n      throw new Error('Username does not exist')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  async authenticateByEmail (email, password) {\r\n    const user = await database[this.model].scope('withPassword').findOne({ where: { email } })\r\n\r\n    if (user != null) {\r\n      const isAuth = user.validPassword(password, user.password)\r\n\r\n      if (!isAuth) {\r\n        throw new Error('Password is wrong')\r\n      }\r\n\r\n      return user\r\n    } else {\r\n      throw new Error('Email does not exist')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Update one record from database based on filter condition\r\n   * @param {Object} updatedData - Updated data\r\n   * @param {Object} [where={}] - Filter condition\r\n   * @param {Object} [transaction={}] - The current transaction, argument used when needed to perform many actions on same transaction\r\n   * @todo Unnecessary override, just make DataAccessProjections\r\n   * @override\r\n   */\r\n  async updateOne (updatedData, where, transaction = {}) {\r\n    if (updatedData.email_verification) {\r\n      delete updatedData.email_verification\r\n    }\r\n\r\n    return database[this.model].scope('withPassword')\r\n      .update(updatedData, { where: { ...where } }, transaction)\r\n  }\r\n\r\n  /**\r\n   * @desc Verify user email (turn user verified)\r\n   * @param {number} id - User Id\r\n   * @param {Object} [transaction={}] - The current transaction, argument used when needed to perform many actions on same transaction\r\n   */\r\n  async verifyEmail (id, transaction = {}) {\r\n    database[this.model]\r\n      .update({ email_verification: true }, { where: { id } }, transaction)\r\n  }\r\n\r\n  /**\r\n   * @desc Check if user verified their email\r\n   * @param {number} id - User Id\r\n   * @returns {boolean}\r\n   */\r\n  async checkEmail (id) {\r\n    const user = await super.getOne({ id, email_verification: true })\r\n    return user != null\r\n  }\r\n\r\n  /**\r\n   * @desc Get user role name\r\n   * @param {number} id - User Id\r\n   * @returns {string} Role name\r\n   */\r\n  async getUserRole (id) {\r\n    const user = await database[this.model].findOne({ where: { id }, include: database.Role })\r\n    return user.role.role_name\r\n  }\r\n\r\n  /**\r\n   * @desc Create a new record on database\r\n   * @param {Object} data - New model data\r\n   * @returns {Object} The new object\r\n   * @todo Unnecessary override, just make DataAccessProjections\r\n   * @override\r\n   */\r\n  async create (data) {\r\n    return super.create((({ username, email, password }) => ({ username, email, password }))(data))\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/repositories/usersRepository.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "UsersRepository",
    "memberof": "students-api/repositories/usersRepository.js",
    "static": true,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/repositories/usersRepository.js",
    "importStyle": "{UsersRepository}",
    "description": "Repository with specific logic to Users table from database",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "Repository"
    ]
  },
  {
    "__docId__": 234,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/repositories/usersRepository.js~UsersRepository",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository#constructor",
    "access": "public",
    "description": "Instantiate base repository with the model name, basically it is a shortcut",
    "examples": [
      "// Instead of\nconst usersRepository = new Repository('User')\n\n// You can do\nconst usersRepository2 = new UsersRepository()"
    ],
    "lineNumber": 17
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "authenticate",
    "memberof": "students-api/repositories/usersRepository.js~UsersRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository#authenticate",
    "access": "public",
    "description": "Authentication method, it verifies if login fields are valid and matches with database",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body.password",
        "description": "Login password"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body.email",
        "description": "Login email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body.username",
        "description": "Login username"
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "User"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "InvalidBodyError"
        ],
        "description": "throw when body does not have required fields"
      },
      {
        "types": [
          "InvalidArgumentError"
        ],
        "description": "throw when body field has invalid or non exist value"
      }
    ]
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "authenticateByUsername",
    "memberof": "students-api/repositories/usersRepository.js~UsersRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository#authenticateByUsername",
    "access": "public",
    "description": "",
    "lineNumber": 48,
    "ignore": true,
    "params": [
      {
        "name": "username",
        "types": [
          "*"
        ]
      },
      {
        "name": "password",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "authenticateByEmail",
    "memberof": "students-api/repositories/usersRepository.js~UsersRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository#authenticateByEmail",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "ignore": true,
    "params": [
      {
        "name": "email",
        "types": [
          "*"
        ]
      },
      {
        "name": "password",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "updateOne",
    "memberof": "students-api/repositories/usersRepository.js~UsersRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository#updateOne",
    "access": "public",
    "description": "Update one record from database based on filter condition",
    "lineNumber": 91,
    "todo": [
      "Unnecessary override, just make DataAccessProjections"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "updatedData",
        "description": "Updated data"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "where",
        "description": "Filter condition"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "transaction",
        "description": "The current transaction, argument used when needed to perform many actions on same transaction"
      }
    ],
    "override": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "verifyEmail",
    "memberof": "students-api/repositories/usersRepository.js~UsersRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository#verifyEmail",
    "access": "public",
    "description": "Verify user email (turn user verified)",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "User Id"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "transaction",
        "description": "The current transaction, argument used when needed to perform many actions on same transaction"
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "checkEmail",
    "memberof": "students-api/repositories/usersRepository.js~UsersRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository#checkEmail",
    "access": "public",
    "description": "Check if user verified their email",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "User Id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "getUserRole",
    "memberof": "students-api/repositories/usersRepository.js~UsersRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository#getUserRole",
    "access": "public",
    "description": "Get user role name",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Role name"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "User Id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Role name"
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "create",
    "memberof": "students-api/repositories/usersRepository.js~UsersRepository",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/repositories/usersRepository.js~UsersRepository#create",
    "access": "public",
    "description": "Create a new record on database",
    "lineNumber": 137,
    "todo": [
      "Unnecessary override, just make DataAccessProjections"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The new object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "New model data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The new object"
    },
    "override": true
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "students-api/routes/classRoutes.js",
    "content": "import { Router } from 'express'\r\nimport ClassController from '../controllers/classController.js'\r\nimport authenticate from '../middleware/authenticate.js'\r\nimport authorization from '../middleware/authorization.js'\r\nimport utils from '../middleware/utils.js'\r\n\r\nconst router = Router()\r\n\r\nrouter\r\n  .get('/classes', ClassController.index, [utils.sort])\r\n  .get('/classes/:id', ClassController.show, [authenticate.access, authorization.hasPermission(['show'])])\r\n  .post('/classes', ClassController.create, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager'])])\r\n  .put('/classes/:id', ClassController.update, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager', 'instructor'])])\r\n  .delete('/classes/:id', ClassController.destroy, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager'])])\r\n  .post('/classes/:id/recover', ClassController.recover, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager'])])\r\n  .get('/classes/:id/enrollments/cancelled', ClassController.showCancelled, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager', 'instructor'])])\r\n  .get('/classes/:id/enrollments/confirmed', ClassController.showConfirmed, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager', 'instructor'])])\r\n  .get('/classes/:id/enrollments', ClassController.showEnrollments, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager', 'instructor'])])\r\n  .get('/classes/enrollments/fullfied', ClassController.indexFullfied, [authenticate.access, authorization.hasPermission(['show'])])\r\n\r\nexport default router\r\n",
    "static": true,
    "longname": "H:/Github/students-api/routes/classRoutes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "router",
    "memberof": "students-api/routes/classRoutes.js",
    "static": true,
    "longname": "students-api/routes/classRoutes.js~router",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/routes/classRoutes.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "students-api/routes/classtypeRoutes.js",
    "content": "import { Router } from 'express'\r\nimport ClasstypeController from '../controllers/classtypeController.js'\r\nimport authenticate from '../middleware/authenticate.js'\r\nimport authorization from '../middleware/authorization.js'\r\n\r\nconst router = Router()\r\n\r\nrouter\r\n  .get('/classtype', ClasstypeController.index)\r\n  .get('/classtype/:id', ClasstypeController.show, [authenticate.access, authorization.hasPermission(['show'])])\r\n  .post('/classtype', ClasstypeController.create, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager'])])\r\n  .put('/classtype/:id', ClasstypeController.update, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager'])])\r\n  .delete('/classtype/:id', ClasstypeController.destroy, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager'])])\r\n  .post('/people/:id/recover', ClasstypeController.recover, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'classManager'])])\r\n\r\nexport default router\r\n",
    "static": true,
    "longname": "H:/Github/students-api/routes/classtypeRoutes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "variable",
    "name": "router",
    "memberof": "students-api/routes/classtypeRoutes.js",
    "static": true,
    "longname": "students-api/routes/classtypeRoutes.js~router",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/routes/classtypeRoutes.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "file",
    "name": "students-api/routes/enrollmentRoutes.js",
    "content": "import { Router } from 'express'\r\nimport EnrollmentController from '../controllers/enrollmentController.js'\r\nimport authenticate from '../middleware/authenticate.js'\r\nimport authorization from '../middleware/authorization.js'\r\n\r\nconst router = Router()\r\n\r\nrouter\r\n  .get('/enrollments', EnrollmentController.index, [authenticate.access, authorization.hasPermission(['show'])])\r\n  .get('/students/:studentId/enrollments/:enrollmentId', EnrollmentController.show, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'enrollmentsManager'])])\r\n  .get('/students/:studentId/enrollments', EnrollmentController.indexStudent, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'enrollmentsManager', 'instructor'])])\r\n  .post('/students/:studentId/enrollments', EnrollmentController.create, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'enrollmentsManager'])])\r\n  .put('/students/:studentId/enrollments/:enrollmentId', EnrollmentController.update, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'enrollmentsManager'])])\r\n  .delete('/students/:studentId/enrollments/:enrollmentId', EnrollmentController.destroy, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'enrollmentsManager'])])\r\n  .post('/students/:studentId/enrollments/:enrollmentId/recover', EnrollmentController.recover, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'enrollmentsManager'])])\r\n\r\nexport default router\r\n",
    "static": true,
    "longname": "H:/Github/students-api/routes/enrollmentRoutes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "variable",
    "name": "router",
    "memberof": "students-api/routes/enrollmentRoutes.js",
    "static": true,
    "longname": "students-api/routes/enrollmentRoutes.js~router",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/routes/enrollmentRoutes.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "students-api/routes/index.js",
    "content": "import bodyParser from 'body-parser'\r\nimport students from './studentRoutes.js'\r\nimport classes from './classRoutes.js'\r\nimport classTypes from './classtypeRoutes.js'\r\nimport enrollments from './enrollmentRoutes.js'\r\n\r\n/**\r\n * @desc Add routes to application\r\n * @param {Object} app Express application context\r\n * @see http://expressjs.com/en/resources/middleware/body-parser.html\r\n * @example\r\n * const app = express()\r\n * routes(app)\r\n */\r\nexport default function (app) {\r\n  app.use(bodyParser.json())\r\n  app.use('/api/v1', [\r\n    students,\r\n    classes,\r\n    classTypes,\r\n    enrollments\r\n  ])\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/routes/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "index",
    "memberof": "students-api/routes/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/routes/index.js~index",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/routes/index.js",
    "importStyle": "index",
    "description": "Add routes to application",
    "examples": [
      "const app = express()\nroutes(app)"
    ],
    "see": [
      "http://expressjs.com/en/resources/middleware/body-parser.html"
    ],
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "Express application context"
      }
    ],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "students-api/routes/studentRoutes.js",
    "content": "import { Router } from 'express'\r\nimport StudentsController from '../controllers/personController.js'\r\nimport authenticate from '../middleware/authenticate.js'\r\nimport authorization from '../middleware/authorization.js'\r\n\r\nconst router = Router()\r\n\r\nrouter\r\n  .get('/students', StudentsController.index, [authenticate.access, authorization.hasPermission(['show'])])\r\n  .get('/students/active', StudentsController.indexActive, [authenticate.access, authorization.hasPermission(['show'])])\r\n  .post('/students/:id/activate', StudentsController.reactivate, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'studentManager'])])\r\n  .post('/students/:id/deactivate', StudentsController.deactivate, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'studentManager'])])\r\n  .get('/students/:id', StudentsController.show, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'studentManager', 'instructor'])])\r\n  .post('/students', StudentsController.create, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'studentManager'])])\r\n  .put('/students/:id', StudentsController.update, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'studentManager'])])\r\n  .delete('/students/:id', StudentsController.destroy, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'studentManager'])])\r\n  .post('/students/:id/recover', StudentsController.recover, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'studentManager'])])\r\n\r\nexport default router\r\n",
    "static": true,
    "longname": "H:/Github/students-api/routes/studentRoutes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "name": "router",
    "memberof": "students-api/routes/studentRoutes.js",
    "static": true,
    "longname": "students-api/routes/studentRoutes.js~router",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/routes/studentRoutes.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "students-api/routes/userRoutes.js",
    "content": "import { Router } from 'express'\r\nimport UserController from '../controllers/userController.js'\r\nimport authenticate from '../middleware/authenticate.js'\r\nimport authorization from '../middleware/authorization.js'\r\nimport rules from '../domain/rules.js'\r\n\r\nconst VALIDATE_EMAIL_ROUTE = rules.user.email_verification.route\r\nconst REFRESH_EMAIL_ROUTE = rules.user.refresh_email_link.route\r\nconst TOKEN_REFRESH_ROUTE = rules.user.token_refresh.route\r\n\r\nconst router = Router()\r\n\r\nrouter\r\n  .post('/login', UserController.login)\r\n  .get('/profile', UserController.profile, [authenticate.access])\r\n  .put('/profile', UserController.updateProfile, [authenticate.access])\r\n  .post('/register', UserController.create, [authenticate.logged])\r\n  .post(`/${TOKEN_REFRESH_ROUTE}`, UserController.refresh, [authenticate.refresh])\r\n  .get(`/${VALIDATE_EMAIL_ROUTE}/:id`, UserController.verify, [authorization.signed])\r\n  .post('/logout', UserController.logout, [authenticate.refresh, authenticate.access])\r\n  .post(`/${REFRESH_EMAIL_ROUTE}`, UserController.refreshVerifyLink, [authenticate.access])\r\n  .get('/user/:id', UserController.show, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'moderator'])])\r\n  .delete('/user/:id', UserController.destroy, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'moderator'])])\r\n  .put('/user/:id', UserController.update, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'moderator'])])\r\n  .post('/user/:id/recover', UserController.recover, [authenticate.access, authorization.verified, authorization.hasRole(['principal', 'moderator'])])\r\n\r\nexport default router\r\n",
    "static": true,
    "longname": "H:/Github/students-api/routes/userRoutes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "variable",
    "name": "VALIDATE_EMAIL_ROUTE",
    "memberof": "students-api/routes/userRoutes.js",
    "static": true,
    "longname": "students-api/routes/userRoutes.js~VALIDATE_EMAIL_ROUTE",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/routes/userRoutes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "REFRESH_EMAIL_ROUTE",
    "memberof": "students-api/routes/userRoutes.js",
    "static": true,
    "longname": "students-api/routes/userRoutes.js~REFRESH_EMAIL_ROUTE",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/routes/userRoutes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "name": "TOKEN_REFRESH_ROUTE",
    "memberof": "students-api/routes/userRoutes.js",
    "static": true,
    "longname": "students-api/routes/userRoutes.js~TOKEN_REFRESH_ROUTE",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/routes/userRoutes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "router",
    "memberof": "students-api/routes/userRoutes.js",
    "static": true,
    "longname": "students-api/routes/userRoutes.js~router",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/routes/userRoutes.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "file",
    "name": "students-api/services/emailService.js",
    "content": "'use strict'\r\n\r\nimport nodemailer from 'nodemailer'\r\n\r\n/**\r\n * @desc Class which represents an email.\r\n * Subclasses must contain the data & body to send to the user email through this abstract class\r\n * @abstract\r\n */\r\nclass Email {\r\n  /**\r\n   * @desc Send email using subclass attributes\r\n   */\r\n  async sendMail () {\r\n    const login = {\r\n      host: process.env.MAIL_HOST,\r\n      auth: {\r\n        user: process.env.MAIL_USER,\r\n        pass: process.env.MAIL_PASSWORD\r\n      },\r\n      port: process.env.MAIL_PORT\r\n    }\r\n\r\n    if (!['production', 'prod'].includes(process.env.NODE_ENV)) {\r\n      const testAccount = await nodemailer.createTestAccount()\r\n      login.host = 'smtp.ethereal.email'\r\n      login.auth = testAccount\r\n      login.port = 587\r\n    }\r\n\r\n    const transporter = nodemailer.createTransport({\r\n      host: login.auth,\r\n      port: login.port,\r\n      secure: login.port == 465,\r\n      auth: login.auth\r\n    })\r\n    const info = await transporter.sendMail(this)\r\n\r\n    if (!['production', 'prod'].includes(process.env.NODE_ENV)) {\r\n      console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info))\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @desc Class which represents an user verification email.\r\n * @extends {Email}\r\n */\r\nclass UserVerificationEmail extends Email {\r\n  /**\r\n   * @param {User} user - User model\r\n   * @param {string} url - Generated link which user should access to validate their email\r\n   */\r\n  constructor (user, url) {\r\n    super()\r\n\r\n    /**\r\n     * @desc Sender\r\n     * @type {string}\r\n     */\r\n    this.from = `\"${process.env.APP_NAME}\" <${process.env.APP_MAIL}>`\r\n\r\n    /**\r\n     * @desc Receiver\r\n     * @type {string}\r\n     */\r\n    this.to = user.email\r\n\r\n    /**\r\n     * @desc Mail subject\r\n     * @type {string}\r\n     */\r\n    this.subject = 'Email verification'\r\n\r\n    /**\r\n     * @desc Content\r\n     * @type {string}\r\n     */\r\n    this.text = `Hello! Verify your e-mail here: ${url}`\r\n\r\n    /**\r\n     * @desc HTML Content\r\n     * @type {string}\r\n    */\r\n    this.html = `<h1>Hello!</h1> Verify your e-mail here: <a href=\"${url}\">${url}</a>`\r\n  }\r\n}\r\n\r\nexport { UserVerificationEmail }\r\n",
    "static": true,
    "longname": "H:/Github/students-api/services/emailService.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "class",
    "name": "Email",
    "memberof": "students-api/services/emailService.js",
    "static": true,
    "longname": "students-api/services/emailService.js~Email",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/services/emailService.js",
    "importStyle": null,
    "description": "Class which represents an email.\nSubclasses must contain the data & body to send to the user email through this abstract class",
    "lineNumber": 10,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "sendMail",
    "memberof": "students-api/services/emailService.js~Email",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "students-api/services/emailService.js~Email#sendMail",
    "access": "public",
    "description": "Send email using subclass attributes",
    "lineNumber": 14,
    "params": [],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "class",
    "name": "UserVerificationEmail",
    "memberof": "students-api/services/emailService.js",
    "static": true,
    "longname": "students-api/services/emailService.js~UserVerificationEmail",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/emailService.js",
    "importStyle": "{UserVerificationEmail}",
    "description": "Class which represents an user verification email.",
    "lineNumber": 49,
    "interface": false,
    "extends": [
      "Email"
    ]
  },
  {
    "__docId__": 262,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "students-api/services/emailService.js~UserVerificationEmail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "students-api/services/emailService.js~UserVerificationEmail#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "User model"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Generated link which user should access to validate their email"
      }
    ]
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "from",
    "memberof": "students-api/services/emailService.js~UserVerificationEmail",
    "static": false,
    "longname": "students-api/services/emailService.js~UserVerificationEmail#from",
    "access": "public",
    "description": "Sender",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "to",
    "memberof": "students-api/services/emailService.js~UserVerificationEmail",
    "static": false,
    "longname": "students-api/services/emailService.js~UserVerificationEmail#to",
    "access": "public",
    "description": "Receiver",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "subject",
    "memberof": "students-api/services/emailService.js~UserVerificationEmail",
    "static": false,
    "longname": "students-api/services/emailService.js~UserVerificationEmail#subject",
    "access": "public",
    "description": "Mail subject",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "text",
    "memberof": "students-api/services/emailService.js~UserVerificationEmail",
    "static": false,
    "longname": "students-api/services/emailService.js~UserVerificationEmail#text",
    "access": "public",
    "description": "Content",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "html",
    "memberof": "students-api/services/emailService.js~UserVerificationEmail",
    "static": false,
    "longname": "students-api/services/emailService.js~UserVerificationEmail#html",
    "access": "public",
    "description": "HTML Content",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "file",
    "name": "students-api/services/envValidatorService.js",
    "content": "import chalk from 'chalk'\r\nimport envRequiredKeys from '../config/env.js'\r\n\r\nArray.prototype.missingKeys = array => {\r\n  const missingKeys = []\r\n\r\n  array.foreach(el => {\r\n    if (!this.includes(el)) {\r\n      missingKeys.push(el)\r\n    }\r\n  })\r\n\r\n  return missingKeys\r\n}\r\n\r\n/**\r\n * @desc Check if app process has the environment values to run the application without break.\r\n * It breaks the application if it does not have\r\n */\r\nexport default function () {\r\n  const missingKeys = Object.keys(process.env).missingKeys(envRequiredKeys)\r\n\r\n  if (missingKeys.length > 0) {\r\n    console.error(chalk.red(`Make sure to define all these environment keys: ${missingKeys.join(', ')}`))\r\n    process.exit(1)\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/services/envValidatorService.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "envValidatorService",
    "memberof": "students-api/services/envValidatorService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/services/envValidatorService.js~envValidatorService",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/envValidatorService.js",
    "importStyle": "envValidatorService",
    "description": "Check if app process has the environment values to run the application without break.\nIt breaks the application if it does not have",
    "lineNumber": 20,
    "params": [],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "file",
    "name": "students-api/services/signatureService.js",
    "content": "import allowlist from '../redis/allowlistSignedRoutes.js'\r\nimport moment from 'moment'\r\nimport crypto from 'crypto'\r\nimport signaturesConfig from '../config/signatures.js'\r\n\r\n/**\r\n * @desc Generate a random signature and add it to redis signed urls allowlist with the payload value\r\n * @param {string} payload - The value to save on redis\r\n * @param {Object} action - The action to save with payload\r\n * @param {string} [action.id='GENERIC'] - The id (type) of action\r\n * @param {number} [action.expiration.time=5] - The expiration time value\r\n * @param {string} [action.expiration.time='d'] - The expiration time unit\r\n * @return {string} signature\r\n * @example\r\n * const payload = user.id\r\n * const action = { id: 'EMAIL_VALIDATION', expiration: { time: 5, unit: 'd' }}\r\n * const signature = await signatureGenerate(payload, action)\r\n */\r\nasync function signatureGenerate (payload, action = signaturesConfig.generic) {\r\n  const signature = crypto.randomBytes(24).toString('hex')\r\n  const expirationTime = moment().add(action.expiration.time, action.expiration.unit).unix()\r\n  await allowlist.add(signature, `{ \"action\": \"${action.id}\", \"value\": \"${payload}\" }`, expirationTime)\r\n  return signature\r\n}\r\n\r\n/**\r\n * @desc Check if a signature is on the redis signed urls allowlist\r\n * @param {string} sign - Signature\r\n * @return {boolean}\r\n */\r\nasync function signatureCheckAllowlist (sign) {\r\n  return allowlist.has(sign)\r\n}\r\n\r\n/**\r\n * @desc Get the payload from signature on the redis signed urls allowlist\r\n * @param {string} sign - Sign\r\n * @return {{action:string, value:string}} Returns the action ID and the value associated\r\n */\r\nasync function signaturePayload (sign) {\r\n  const payload = await allowlist.find(sign)\r\n  return JSON.parse(payload)\r\n}\r\n\r\n/**\r\n * @desc Remove a signature from the redis signed urls allowlist\r\n * @param {string} signature\r\n */\r\nasync function signatureDelete (signature) {\r\n  allowlist.delete(signature)\r\n}\r\n\r\n/**\r\n * @desc Check if payload has a specific action associated with it.\r\n * You can get the payload using {@link signaturePayload}\r\n * @param {{action:string, value:string}} payload - The payload\r\n * @param {Object} action - The action\r\n * @param {string} [action.id='GENERIC'] - The id (type) of action\r\n * @returns\r\n */\r\nfunction signaturePayloadValidateAction (payload, action = signaturesConfig.generic) {\r\n  return payload.action == action.id\r\n}\r\n\r\n/**\r\n * @desc Get complete url links with signature included.\r\n * You can generate signatures using {@link signatureGenerate}\r\n * @param {string} route - The base url path (doesn't matters if it is absolute or not)\r\n * @param {string} signature - The signature\r\n * @returns {string} the link with signature included\r\n */\r\nfunction signedUrlPath (route, signature) {\r\n  return `${route}?sign=${signature}`\r\n}\r\n\r\nexport { signatureCheckAllowlist, signaturePayload, signatureGenerate, signedUrlPath, signatureDelete, signaturePayloadValidateAction }\r\n",
    "static": true,
    "longname": "H:/Github/students-api/services/signatureService.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "signatureCheckAllowlist",
    "memberof": "students-api/services/signatureService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/signatureService.js~signatureCheckAllowlist",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/signatureService.js",
    "importStyle": "{signatureCheckAllowlist}",
    "description": "Check if a signature is on the redis signed urls allowlist",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sign",
        "description": "Signature"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "signaturePayload",
    "memberof": "students-api/services/signatureService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/signatureService.js~signaturePayload",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/signatureService.js",
    "importStyle": "{signaturePayload}",
    "description": "Get the payload from signature on the redis signed urls allowlist",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sign",
        "description": "Sign"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{action:string, value:string}"
      ],
      "spread": false,
      "description": "Returns the action ID and the value associated"
    }
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "signatureGenerate",
    "memberof": "students-api/services/signatureService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/signatureService.js~signatureGenerate",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/signatureService.js",
    "importStyle": "{signatureGenerate}",
    "description": "Generate a random signature and add it to redis signed urls allowlist with the payload value",
    "examples": [
      "const payload = user.id\nconst action = { id: 'EMAIL_VALIDATION', expiration: { time: 5, unit: 'd' }}\nconst signature = await signatureGenerate(payload, action)"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "The value to save on redis"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "The action to save with payload"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'GENERIC'",
        "defaultRaw": "'GENERIC'",
        "name": "action.id",
        "description": "The id (type) of action"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "action.expiration.time",
        "description": "The expiration time value"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'d'",
        "defaultRaw": "'d'",
        "name": "action.expiration.time",
        "description": "The expiration time unit"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "signature"
    }
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "signedUrlPath",
    "memberof": "students-api/services/signatureService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/services/signatureService.js~signedUrlPath",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/signatureService.js",
    "importStyle": "{signedUrlPath}",
    "description": "Get complete url links with signature included.\nYou can generate signatures using {@link signatureGenerate}",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the link with signature included"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "The base url path (doesn't matters if it is absolute or not)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": "The signature"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the link with signature included"
    }
  },
  {
    "__docId__": 275,
    "kind": "function",
    "name": "signatureDelete",
    "memberof": "students-api/services/signatureService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/signatureService.js~signatureDelete",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/signatureService.js",
    "importStyle": "{signatureDelete}",
    "description": "Remove a signature from the redis signed urls allowlist",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signature",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "signaturePayloadValidateAction",
    "memberof": "students-api/services/signatureService.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "students-api/services/signatureService.js~signaturePayloadValidateAction",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/signatureService.js",
    "importStyle": "{signaturePayloadValidateAction}",
    "description": "Check if payload has a specific action associated with it.\nYou can get the payload using {@link signaturePayload}",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{action:string, value:string}"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "The payload"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "The action"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'GENERIC'",
        "defaultRaw": "'GENERIC'",
        "name": "action.id",
        "description": "The id (type) of action"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "students-api/services/tokenService.js",
    "content": "\r\nimport jwt from 'jsonwebtoken'\r\nimport moment from 'moment'\r\nimport crypto from 'crypto'\r\nimport allowlist from '../redis/allowlistRefreshToken.js'\r\nimport blocklist from '../redis/blocklistAcessToken.js'\r\nimport tokensConfig from '../config/tokens.js'\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst accessExpirationTime = tokensConfig.access.expiration.time + tokensConfig.access.expiration.unit\r\n\r\n/**\r\n * @desc Generate a jwt token\r\n * @param {string} payload - Payload to include on token\r\n * @return {string} The jwt token\r\n */\r\nasync function accessTokenGenerator (payload) {\r\n  return jwt.sign(payload, process.env.APP_KEY, { expiresIn: accessExpirationTime })\r\n}\r\n\r\n/**\r\n * @desc Check if jwt token is on redis access token blocklist\r\n * @param {string} token - Token\r\n * @return {boolean}\r\n */\r\nasync function accessTokenCheckBlocklist (token) {\r\n  return blocklist.has(token)\r\n}\r\n\r\n/**\r\n * @desc Check if jwt token is valid\r\n * @param {string} token - Token\r\n * @return {boolean}\r\n */\r\nasync function accessTokenVerifier (token) {\r\n  return jwt.verify(token, process.env.APP_KEY)\r\n}\r\n\r\n/**\r\n * @desc Invalid token and add it to redis access token blocklist\r\n * @param {string} token - Token\r\n */\r\nasync function accessTokenDelete (token) {\r\n  blocklist.add(token)\r\n}\r\n\r\n/**\r\n * @desc Generate a refresh token and add it to redis refresh token allowlist\r\n * @param {string} payload - Payload to include on token\r\n * @return {string} The refresh token\r\n */\r\nasync function refreshTokenGenerator (payload) {\r\n  const token = crypto.randomBytes(24).toString('hex')\r\n  const expirationTime = moment().add(tokensConfig.refresh.expiration.time, tokensConfig.refresh.expiration.unit).unix()\r\n  await allowlist.add(token, payload, expirationTime)\r\n  return token\r\n}\r\n\r\n/**\r\n * @desc Get refresh token value from redis refresh token allowlist\r\n * @param {string} token - Token to find\r\n * @return {string} The payload\r\n */\r\nasync function refreshTokenFinder (token) {\r\n  return allowlist.find(token)\r\n}\r\n\r\n/**\r\n * @desc Remove token from redis refresh token allowlist\r\n * @param {string} token - Token to delete\r\n */\r\nasync function refreshTokenDelete (token) {\r\n  allowlist.delete(token)\r\n}\r\n\r\nexport {\r\n  accessTokenGenerator,\r\n  accessTokenCheckBlocklist,\r\n  accessTokenVerifier,\r\n  accessTokenDelete,\r\n  refreshTokenGenerator,\r\n  refreshTokenFinder,\r\n  refreshTokenDelete\r\n}\r\n",
    "static": true,
    "longname": "H:/Github/students-api/services/tokenService.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "variable",
    "name": "accessExpirationTime",
    "memberof": "students-api/services/tokenService.js",
    "static": true,
    "longname": "students-api/services/tokenService.js~accessExpirationTime",
    "access": "public",
    "export": false,
    "importPath": "students-api/students-api/services/tokenService.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "function",
    "name": "accessTokenGenerator",
    "memberof": "students-api/services/tokenService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/tokenService.js~accessTokenGenerator",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/tokenService.js",
    "importStyle": "{accessTokenGenerator}",
    "description": "Generate a jwt token",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "Payload to include on token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The jwt token"
    }
  },
  {
    "__docId__": 280,
    "kind": "function",
    "name": "accessTokenCheckBlocklist",
    "memberof": "students-api/services/tokenService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/tokenService.js~accessTokenCheckBlocklist",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/tokenService.js",
    "importStyle": "{accessTokenCheckBlocklist}",
    "description": "Check if jwt token is on redis access token blocklist",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "Token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 281,
    "kind": "function",
    "name": "accessTokenVerifier",
    "memberof": "students-api/services/tokenService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/tokenService.js~accessTokenVerifier",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/tokenService.js",
    "importStyle": "{accessTokenVerifier}",
    "description": "Check if jwt token is valid",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "Token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "accessTokenDelete",
    "memberof": "students-api/services/tokenService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/tokenService.js~accessTokenDelete",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/tokenService.js",
    "importStyle": "{accessTokenDelete}",
    "description": "Invalid token and add it to redis access token blocklist",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "Token"
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "function",
    "name": "refreshTokenGenerator",
    "memberof": "students-api/services/tokenService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/tokenService.js~refreshTokenGenerator",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/tokenService.js",
    "importStyle": "{refreshTokenGenerator}",
    "description": "Generate a refresh token and add it to redis refresh token allowlist",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": "Payload to include on token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The refresh token"
    }
  },
  {
    "__docId__": 284,
    "kind": "function",
    "name": "refreshTokenFinder",
    "memberof": "students-api/services/tokenService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/tokenService.js~refreshTokenFinder",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/tokenService.js",
    "importStyle": "{refreshTokenFinder}",
    "description": "Get refresh token value from redis refresh token allowlist",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "Token to find"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The payload"
    }
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "refreshTokenDelete",
    "memberof": "students-api/services/tokenService.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "students-api/services/tokenService.js~refreshTokenDelete",
    "access": "public",
    "export": true,
    "importPath": "students-api/students-api/services/tokenService.js",
    "importStyle": "{refreshTokenDelete}",
    "description": "Remove token from redis refresh token allowlist",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "Token to delete"
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Students Api\r\n\r\nThis is a very simple Restfull Api built with Express and Sequelize. It uses Nodemailer, SlackApi, Kafka and Redis on infrastructure\r\n\r\n## Who is it for?\r\n\r\nNo one in particular, it's a project just to practice\r\n\r\n## Docs \r\n\r\nYou can find the code documentation [here](). It was generated by the esdoc library.\r\n\r\n## Models\r\n\r\n- User\r\n- Student \r\n- Class\r\n- ClassType (like category)\r\n- Enrollment \r\n- Role\r\n- Permission\r\n\r\n### Securance\r\n\r\n- Access restrict routes using login and authorization token\r\n- Registration requires email verification with signed URL \r\n- Auth & Authorization Middlewares\r\n- JWT token & Refresh token to renew JWT token (like OAuth)\r\n\r\n#### Roles \r\n\r\nIt has a middleware to check if user has roles: `authorization.hasRole(['moderator'])`\r\n\r\n- Principal\r\n- Moderator\r\n- Student Manager \r\n- Class Manager\r\n- Enrollments Manager \r\n- Instructor\r\n\r\nDefault role: noRole \r\n\r\n#### Permissions \r\n\r\nIt has a middleware to check if user has permissions: `authorization.hasPermission(['show'])`\r\n\r\n- Show \r\n- Create\r\n- Update\r\n- Toggle\r\n- Delete \r\n- Restore",
    "longname": "H:\\Github\\students-api\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"students-api\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Just practicing\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/hemelo/api-with-sequelize-orm.git\"\n  },\n  \"keywords\": [\n    \"api\",\n    \"sequelize\",\n    \"orm\"\n  ],\n  \"author\": \"Henrique Melo\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/hemelo/api-with-sequelize-orm/issues\"\n  },\n  \"homepage\": \"https://github.com/hemelo/api-with-sequelize-orm#readme\",\n  \"dependencies\": {\n    \"@slack/web-api\": \"^6.7.1\",\n    \"bcrypt\": \"^5.0.1\",\n    \"body-parser\": \"^1.19.0\",\n    \"chalk\": \"^5.0.1\",\n    \"cors\": \"^2.8.5\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"express\": \"^4.17.1\",\n    \"jsonwebtoken\": \"^8.5.1\",\n    \"kafkajs\": \"^2.0.0\",\n    \"moment\": \"^2.29.3\",\n    \"mysql2\": \"^2.1.0\",\n    \"nodemailer\": \"^6.7.5\",\n    \"path\": \"^0.12.7\",\n    \"redis\": \"^4.1.0\",\n    \"sequelize\": \"^6.3.0\",\n    \"sequelize-cli\": \"^6.2.0\"\n  },\n  \"devDependencies\": {\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"eslint\": \"^8.15.0\",\n    \"eslint-config-standard\": \"^17.0.0\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-n\": \"^15.2.0\",\n    \"eslint-plugin-promise\": \"^6.0.0\",\n    \"nodemon\": \"^2.0.4\"\n  }\n}\n",
    "longname": "H:\\Github\\students-api\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]